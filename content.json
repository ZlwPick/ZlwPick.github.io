{"pages":[],"posts":[{"title":"IDEA 常用的快捷键","text":"一键格式化代碼： Ctrl+Alt+L全局搜索替换：ctrl+shift+r强大的搜索功能，shift+shift (无论您想要搜啥都能找到)ctrl+shift+R:搜索类 &emsp;&emsp; CTRL+N：按照类名搜索类 [常规] Ctrl+Shift + Enter，语句完成“！”，否定完成，输入表达式时按 “！”键Ctrl+E，最近的文件Ctrl+Shift+E，最近更改的文件Shift+Click，可以关闭文件Ctrl+[ OR ]，可以跑到大括号的开头与结尾Ctrl+F12，可以显示当前文件的结构Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择Ctrl+N，可以快速打开类Ctrl+Shift+N，可以快速打开文件Alt+Q，可以看到当前方法的声明Ctrl+P，可以显示参数信息Ctrl+Shift+Insert，可以选择剪贴板内容并插入Alt+Insert，可以生成构造器/Getter/Setter等Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catchCtrl+Enter，导入包，自动修正Ctrl+Alt+L，格式化代码Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作Ctrl+Alt+O，优化导入的类和包Ctrl+R，替换文本Ctrl+F，查找文本Ctrl+Shift+Space，自动补全代码Ctrl+空格，代码提示（与系统输入法快捷键冲突）Ctrl+Shift+Alt+N，查找类中的方法或变量Alt+Shift+C，最近的更改Alt+Shift+Up/Down，上/下移一行Shift+F6，重构 - 重命名Ctrl+X，删除行Ctrl+D，复制行Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）Ctrl+J，自动代码（例如：serr）Ctrl+Alt+J，用动态模板环绕Ctrl+H，显示类结构图（类的继承层次）Ctrl+Q，显示注释文档Alt+F1，查找代码所在位置Alt+1，快速打开或隐藏工程面板Ctrl+Alt+left/right，返回至上次浏览的位置Alt+left/right，切换代码视图Alt+Up/Down，在方法间快速移动定位Ctrl+Shift+Up/Down，向上/下移动语句F2 或 Shift+F2，高亮错误或警告快速定位Tab，代码标签输入完成后，按 Tab，生成代码Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失Alt+F3，逐个往下查找相同文本，并高亮显示Ctrl+Up/Down，光标中转到第一行或最后一行下Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）Ctrl+Alt+B，跳转到方法实现处Ctrl+Shift+Backspace，跳转到上次编辑的地方Ctrl+O，重写方法Ctrl+Alt+Space，类名自动完成Ctrl+Alt+Up/Down，快速跳转搜索结果Ctrl+Shift+J，整合两行Alt+F8，计算变量值Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本Ctrl+Alt+Shift+V，简单粘贴Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口F12，把焦点从编辑器移到最近使用的工具窗口Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器Ctrl+W，可以选择单词继而语句继而行继而函数Ctrl+Shift+W，取消选择光标所在词Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置Ctrl+I，实现方法Ctrl+Shift+U，大小写转化Ctrl+Y，删除当前行Shift+Enter，向下插入新行psvm/sout，main/System.out.println(); Ctrl+J，查看更多Ctrl+Shift+F，全局查找Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找Ctrl+Shift+S，高级搜索Ctrl+U，转到父类Ctrl+Alt+S，打开设置对话框Alt+Shift+Inert，开启/关闭列选择模式Ctrl+Alt+Shift+S，打开当前项目/模块属性Ctrl+G，定位行Alt+Home，跳转到导航栏Ctrl+Enter，上插一行Ctrl+Backspace，按单词删除Ctrl+”+/-“，当前方法展开、折叠Ctrl+Shift+”+/-“，全部展开、折叠 [调试部分、编译] Ctrl+F2，停止Alt+Shift+F9，选择 DebugAlt+Shift+F10，选择 RunCtrl+Shift+F9，编译Ctrl+Shift+F10，运行Ctrl+Shift+F8，查看断点F8，步过F7，步入Shift+F7，智能步入Shift+F8，步出Alt+Shift+F8，强制步过Alt+Shift+F7，强制步入Alt+F9，运行至光标处Ctrl+Alt+F9，强制运行至光标处F9，恢复程序Alt+F10，定位到断点Ctrl+F8，切换行断点Ctrl+F9，生成项目Alt+1，项目Alt+2，收藏Alt+6，TODOAlt+7，结构Ctrl+Shift+C，复制路径Ctrl+Alt+Shift+C，复制引用，必须选择类名Ctrl+Alt+Y，同步Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）Shift+F12，还原默认布局Ctrl+Shift+F12，隐藏/恢复所有窗口Ctrl+F4，关闭Ctrl+Shift+F4，关闭活动选项卡Ctrl+Tab，转到下一个拆分器Ctrl+Shift+Tab，转到上一个拆分器 [重构] Ctrl+Alt+Shift+T，弹出重构菜单Shift+F6，重命名F6，移动F5，复制Alt+Delete，安全删除Ctrl+Alt+N，内联 [查找] Ctrl+F，查找Ctrl+R，替换F3，查找下一个Shift+F3，查找上一个Ctrl+Shift+F，在路径中查找Ctrl+Shift+R，在路径中替换Ctrl+Shift+S，搜索结构Ctrl+Shift+M，替换结构Alt+F7，查找用法Ctrl+Alt+F7，显示用法Ctrl+F7，在文件中查找用法Ctrl+Shift+F7，在文件中高亮显示用法 [VCS] Alt+~，VCS 操作菜单Ctrl+K，提交更改Ctrl+T，更新项目Ctrl+Alt+Shift+D，显示变化","link":"/2019/10/20/IDEA-常用的快捷键/"},{"title":"LeetCode 1.Two Sum","text":"Two Sum题目描述:给定一个整数数组和一个目标值,找出数组中和为目标值的 两个 数你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。 示例给定 nums = [2,7,11,15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回[0,1] 解法一[暴力破解法]123456789public static int[] Solution(int[] nums, int target) { for (int i = 0; i &lt; nums.length; i++) { for (int j = i + 1; j &lt; nums.length; j++) { if (target == nums[i] + nums[j]) return new int[]{i, j}; } } throw new IllegalArgumentException(&quot;not two sum solution&quot;);} 解法二[一遍哈希表]12345678910public static int[] Solution2(int[] nums,int target){ Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for(int i = 0; i&lt; nums.length; i++) { if(map.containsKey(target - nums[i])) { return new int[] {map.get(target-nums[i]),i}; } map.put(nums[i], i); } throw new IllegalArgumentException(&quot;No two sum solution&quot;); }","link":"/2019/10/20/LeetCode-1-Two-Sum/"},{"title":"LeetCode 13.Roman to Integer","text":"Roman to Integer罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。 字符 数值I 1V 5X 10L 50C 100D 500M 1000 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况： I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。 示例 1: 输入: “III”输出: 3 示例 2: 输入: “IV”输出: 4 示例 3: 输入: “IX”输出: 9 示例 4: 输入: “LVIII”输出: 58解释: L = 50, V= 5, III = 3. 示例 5: 输入: “MCMXCIV”输出: 1994解释: M = 1000, CM = 900, XC = 90, IV = 4. 1234567891011121314151617181920public static int romanToInt(String s) { Map&lt;Character,Integer&gt; map = new HashMap&lt;&gt;(); map.put(&apos;I&apos;,1); map.put(&apos;V&apos;,5); map.put(&apos;X&apos;,10); map.put(&apos;L&apos;,50); map.put(&apos;C&apos;,100); map.put(&apos;D&apos;,500); map.put(&apos;M&apos;,1000); int result = 0; for (int i = 0; i &lt; s.length(); i++) { if(i&gt;0 &amp;&amp; map.get(s.charAt(i)) &gt; map.get(s.charAt(i-1))){ result += map.get(s.charAt(i)) - 2 * map.get(s.charAt(i-1)); }else{ result += map.get(s.charAt(i)); } } return result; }","link":"/2019/10/21/LeetCode-13-Roman-to-Integer/"},{"title":"Markdown操作","text":"Markdownd是一种轻量级的标记语言Markdownd编写的文档后缀为.md,.markdown Hello World! 标题我是一级标题我是二级标题 一级标题二级标题三级标题四级标题[格式]123456============------------######1-6个# 表示1-6级标题 段落格式 1.末尾添加两个空格2.使用空行来换行 字体[字体格式]123456*斜体字体*_斜体字体_**粗体字体**__粗体字体__***粗斜体字体***___粗斜体字体___ 斜体字体斜体字体粗体字体粗体字体粗斜体字体粗斜体字体 分割线[分割线格式]12345**** * ******- - ---------- 删除线和下划线和脚注zlwblogzlwBLOG zlwblog1 这是一个脚注^123这是一个脚注 列表 1 2 3 1 2 3 第一项 1.1 1.2 第二项 2.1 2.2结束 区块 zzzzzzllllllwwwwwwwz 1 2 3 1 1.11.2 2 代码printf()函数 test(){12 111;} 支持HTML元素https://github/ZlwPickCtrl+Alt+Del重启电脑 转义 *","link":"/2019/10/19/Markdown操作/"},{"title":"LeetCode 7.Reverse Integer","text":"Reverse Integer题目描述:给定一个32位有符号整数，将整数中的数字进行反转 示例1:输入:123输入:321 示例2:输入:-123输入:-321 示例3:输入:120输入:21 注意:假设我们的环境只能存储32位有符号整数，其数值范围是[-2^31 , 2^31 -1],如果反转后的整数溢出，返回0. [1]1234567891011public static int Solution(int x){ int rev = 0; while (x!=0){ int pop = x % 10; // 取x的最后一位 x /= 10; // 删除X的最后一位 if(rev &gt; Integer.MAX_VALUE / 10 || rev &lt; Integer.MIN_VALUE /10) //溢出判断 return 0; rev = rev * 10 + pop; //之前的数值向前推进1位加上当前数 } return rev;} https://zlwblog.cn","link":"/2019/10/21/LeetCode-7-Reverse-Integer/"},{"title":"Hello World","text":"","link":"/2019/06/23/hello-world/"},{"title":"zzz","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. [title] [] [url] [link text]1code snippet","link":"/2019/06/24/周李伟的第一篇文章/"},{"title":"练习hexo的发布","text":"[title] [] [url] [link text]1234567---title: #文章标题date: #时间，一般不用改categories: #目录分类tags: #标签，格式可以是[Hexo,总结]，中间用英文逗号分开keywords: #文章关键词，多个关键词用英文逗号隔开--- 1alert(&apos;Hello World!&apos;); Array.map1array.map(callback[, thisArg]) 插入图片的方法 绝对路径 当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。 12source/images/image.jpg![](/images/image.jpg) 图片既可以在首页内容中访问到，也可以在文章正文中访问到。 相对路径图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。_config.yml 1post_asset_folder: true 将_config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new post_name，在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。 12_posts/post_name/image.jpg![](image.jpg) 上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。如果希望图片在文章和首页中同时显示，可以使用标签插件语法。 12_posts/post_name/image.jpg Time.javaview raw12345678910111213141516171819202122/** * @author zlw * @create 2019-09-11 22:53 */public class Time { public static void main(String[] args) { long startTime = System.currentTimeMillis(); doSomeThing(); long endTime = System.currentTimeMillis(); System.out.println(\"====================\"); System.out.println( (endTime - startTime)+\"ms\"); } public static void doSomeThing(){ for (int i = 0; i &lt; 100; i++) { for (int j = 0; j &lt; 100; j++) { System.out.println(i * j); } } }}","link":"/2019/10/18/练习hexo的发布/"}],"tags":[{"name":"IDEA","slug":"IDEA","link":"/tags/IDEA/"},{"name":"工具操作","slug":"工具操作","link":"/tags/工具操作/"},{"name":"LeetCode","slug":"LeetCode","link":"/tags/LeetCode/"},{"name":"算法","slug":"算法","link":"/tags/算法/"},{"name":"写作","slug":"写作","link":"/tags/写作/"},{"name":"前端","slug":"前端","link":"/tags/前端/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"练习","slug":"练习","link":"/tags/练习/"}],"categories":[{"name":"IDEA","slug":"IDEA","link":"/categories/IDEA/"},{"name":"LeetCode","slug":"LeetCode","link":"/categories/LeetCode/"},{"name":"前端","slug":"前端","link":"/categories/前端/"},{"name":"hexo操作","slug":"hexo操作","link":"/categories/hexo操作/"}]}