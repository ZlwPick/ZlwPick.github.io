{"pages":[],"posts":[{"title":"Hexo+coding+github加速博客访问","text":"之前使用Hexo+github建立后访问博客速慢,是因为github服务器在国外，可能访问量太大，国内访问速度有些慢;然后改用coding 托管代码什么是coding？简单的说coding就是类似于github的开源代码仓库，几乎是完全仿照github做的；虽然现在代码量并不多，但是部分地方还是比github方便一些的：中文界面，对我们来用起来更加方便；可以免费创建私有仓库；虽然服务器也在国外，但访问速度比github要快不少注册coding并创建项目这一部分很简单，不多说。需要注意的是创建项目的时候项目名称跟我们在github上创建时候类似，项目名一定要是：用户名 + coding.me创建Coding项目创建完成之后，先完成下一步在进行其他步骤配置SSH Key只是把其中的添加SSH key添加到GitHub的步骤换成下面的就行,添加SSH key到Coding将上面生产的id_rsa.pub中的内容添加SSH Key到Codingcoding ---&gt; 个人账户 ---&gt; SSH公钥 ---&gt; 添加公钥测试SSH Key 是否配置成功[git bash]1$ ssh -T git@github.comHexo部署添加Coding仓库修改Hexo博客目录下的站点配置文件_config.yml中的部署配置[_config.yml]123456deploy: type: git repo: github: https://github.com/ZlwPick/ZlwPick.github.io.git coding: https://e.coding.net/zlwblog/zlw.git branch: master重新执行Hexo部署命令，此时就会将Hexo博客部署到GitHub和Coding上了hexo d部署结束之后，Coding项目master分支下面就会有代码了左侧菜单 ---&gt; 部署 ---&gt; 静态网址 ---&gt; 把代码库里面的项目部署一下配置域名分流解析dns修改之后需要一点时间刷新,之后在静态网页设置里面申请SSL证书(一定先把DNS中GitHub的解析关了,要不然申请失败),在下方打开https自动最小化静态文件Chrome 开发者工具中提供的 Network 选项卡可以很方便的检测整个网站的文件传输情况。通过输入 domain:kaitohh.com 筛选仅来自于源站的文件，可以看到所有来自于源站的文件及大小。可以发现绝大部分文件都是一些网站本身的 CSS 和 JS，最大的文件是当前网站的 HTML 代码，这些文件由于经常会发生变动，因此不能直接存在对象存储中。接下来，逐个预览这些文件，发现这些文件居然都没有最小化！安装插件 https://github.com/chenzhutian/hexo-all-minifier$ npm install hexo-all-minifier –save_config.ymlall_minifier: true","link":"/2019/10/24/Hexo-coding-github加速博客访问/"},{"title":"IDEA 后缀补全","text":"IDEA 有个很厉害的功能，那就是后缀补全（不是自动补全），这个功能可以使用代码补全来模板式地补全语句，如遍历循环语句（for、foreach）、使用 String.format() 包裹一个字符串、使用类型转化包裹一个表达式、根据判（非）空或者其它判别语句生成 if 语句、用 instanceOf 生成分支判断语句等。使用的方式也很简单，就是在一个表达式后按下点号 . ，然后输入一些提示或者在列表中选择一个候选项，常见的候选项下面会给出 GIF 演示。var 声明null判断notnull判断nn判断ifreturn","link":"/2019/10/26/IDEA-后缀补全/"},{"title":"IDEA 常用的快捷键","text":"一键格式化代碼： Ctrl+Alt+L全局搜索替换：ctrl+shift+r强大的搜索功能，shift+shift (无论您想要搜啥都能找到)ctrl+shift+R:搜索类 &emsp;&emsp; CTRL+N：按照类名搜索类[常规]Ctrl+Shift + Enter，语句完成“！”，否定完成，输入表达式时按 “！”键Ctrl+E，最近的文件Ctrl+Shift+E，最近更改的文件Shift+Click，可以关闭文件Ctrl+[ OR ]，可以跑到大括号的开头与结尾Ctrl+F12，可以显示当前文件的结构Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择Ctrl+N，可以快速打开类Ctrl+Shift+N，可以快速打开文件Alt+Q，可以看到当前方法的声明Ctrl+P，可以显示参数信息Ctrl+Shift+Insert，可以选择剪贴板内容并插入Alt+Insert，可以生成构造器/Getter/Setter等Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catchCtrl+Enter，导入包，自动修正Ctrl+Alt+L，格式化代码Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作Ctrl+Alt+O，优化导入的类和包Ctrl+R，替换文本Ctrl+F，查找文本Ctrl+Shift+Space，自动补全代码Ctrl+空格，代码提示（与系统输入法快捷键冲突）Ctrl+Shift+Alt+N，查找类中的方法或变量Alt+Shift+C，最近的更改Alt+Shift+Up/Down，上/下移一行Shift+F6，重构 - 重命名Ctrl+X，删除行Ctrl+D，复制行Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）Ctrl+J，自动代码（例如：serr）Ctrl+Alt+J，用动态模板环绕Ctrl+H，显示类结构图（类的继承层次）Ctrl+Q，显示注释文档Alt+F1，查找代码所在位置Alt+1，快速打开或隐藏工程面板Ctrl+Alt+left/right，返回至上次浏览的位置Alt+left/right，切换代码视图Alt+Up/Down，在方法间快速移动定位Ctrl+Shift+Up/Down，向上/下移动语句F2 或 Shift+F2，高亮错误或警告快速定位Tab，代码标签输入完成后，按 Tab，生成代码Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失Alt+F3，逐个往下查找相同文本，并高亮显示Ctrl+Up/Down，光标中转到第一行或最后一行下Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）Ctrl+Alt+B，跳转到方法实现处Ctrl+Shift+Backspace，跳转到上次编辑的地方Ctrl+O，重写方法Ctrl+Alt+Space，类名自动完成Ctrl+Alt+Up/Down，快速跳转搜索结果Ctrl+Shift+J，整合两行Alt+F8，计算变量值Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本Ctrl+Alt+Shift+V，简单粘贴Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口F12，把焦点从编辑器移到最近使用的工具窗口Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器Ctrl+W，可以选择单词继而语句继而行继而函数Ctrl+Shift+W，取消选择光标所在词Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置Ctrl+I，实现方法Ctrl+Shift+U，大小写转化Ctrl+Y，删除当前行Shift+Enter，向下插入新行psvm/sout，main/System.out.println(); Ctrl+J，查看更多Ctrl+Shift+F，全局查找Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找Ctrl+Shift+S，高级搜索Ctrl+U，转到父类Ctrl+Alt+S，打开设置对话框Alt+Shift+Inert，开启/关闭列选择模式Ctrl+Alt+Shift+S，打开当前项目/模块属性Ctrl+G，定位行Alt+Home，跳转到导航栏Ctrl+Enter，上插一行Ctrl+Backspace，按单词删除Ctrl+”+/-“，当前方法展开、折叠Ctrl+Shift+”+/-“，全部展开、折叠[调试部分、编译]Ctrl+F2，停止Alt+Shift+F9，选择 DebugAlt+Shift+F10，选择 RunCtrl+Shift+F9，编译Ctrl+Shift+F10，运行Ctrl+Shift+F8，查看断点F8，步过F7，步入Shift+F7，智能步入Shift+F8，步出Alt+Shift+F8，强制步过Alt+Shift+F7，强制步入Alt+F9，运行至光标处Ctrl+Alt+F9，强制运行至光标处F9，恢复程序Alt+F10，定位到断点Ctrl+F8，切换行断点Ctrl+F9，生成项目Alt+1，项目Alt+2，收藏Alt+6，TODOAlt+7，结构Ctrl+Shift+C，复制路径Ctrl+Alt+Shift+C，复制引用，必须选择类名Ctrl+Alt+Y，同步Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）Shift+F12，还原默认布局Ctrl+Shift+F12，隐藏/恢复所有窗口Ctrl+F4，关闭Ctrl+Shift+F4，关闭活动选项卡Ctrl+Tab，转到下一个拆分器Ctrl+Shift+Tab，转到上一个拆分器[重构]Ctrl+Alt+Shift+T，弹出重构菜单Shift+F6，重命名F6，移动F5，复制Alt+Delete，安全删除Ctrl+Alt+N，内联[查找]Ctrl+F，查找Ctrl+R，替换F3，查找下一个Shift+F3，查找上一个Ctrl+Shift+F，在路径中查找Ctrl+Shift+R，在路径中替换Ctrl+Shift+S，搜索结构Ctrl+Shift+M，替换结构Alt+F7，查找用法Ctrl+Alt+F7，显示用法Ctrl+F7，在文件中查找用法Ctrl+Shift+F7，在文件中高亮显示用法[VCS]Alt+~，VCS 操作菜单Ctrl+K，提交更改Ctrl+T，更新项目Ctrl+Alt+Shift+D，显示变化","link":"/2019/10/20/IDEA-常用的快捷键/"},{"title":"Java 8 - 函数编程（lambda表达式）","text":"简介超过3行的逻辑就不适用Lambda表达式了。虽然看着很先进，其实Lambda表达式的本质只是一个”语法糖(用更简练的言语表达较复杂的含义)”,由编译器推断并帮你转换包装为常规的代码,因此你可以使用更少的代码来实现同样的功能。本人建议不要乱用,因为这就和某些很高级的黑客写的代码一样,简洁,难懂,难以调试,维护人员想骂娘.)Lambda表达式是Java SE 8中一个重要的新特性。lambda表达式允许你通过表达式来代替功能接口.lambda表达式就和方法一样,它提供了一个正常的参数列表和一个使用这些参数的主体(body,可以是一个表达式或一个代码块)。基本语法(parameters) -&gt; expression或(请注意语句的花括号)(parameters) -&gt; {expression}λ表达式本质上是一个匿名方法。让我们来看下面这个例子：public int add(int x, int y) {return x + y;}转成λ表达式后是这个样子：(int x, int y) -&gt; x + y;参数类型也可以省略，Java编译器会根据上下文推断出来：(x, y) -&gt; x + y; //返回两数之和或者(x, y) -&gt; { return x + y; } //显式指明返回值可见λ表达式有三部分组成：参数列表，箭头（-&gt;），以及一个表达式或语句块。下面这个例子里的λ表达式没有参数，也没有返回值（相当于一个方法接受0个参数，返回void，其实就是Runnable里run方法的一个实现）：() -&gt; { System.out.println(“Hello Lambda!”); }如果只有一个参数且可以被Java推断出类型，那么参数列表的括号也可以省略：c -&gt; { return c.size(); }[lambda简单例子]123456// 1.不需要参数 返回值 7() -&gt; 7// 2. 接受两个int类型参数 返回值 为 两者之和(int x,int y) -&gt; x+y// 3. 接受一个string类型参数,并进行打印,没有返回值(String s) -&gt; System.out.print(s)[循环输出]12345678910111213// 随便定义的数据 String[] str = {\"zlw\",\"joe\",\"qjl\",\"lxl\",\"zc\",\"sam\"}; List&lt;String&gt; players = Arrays.asList(str); // 以前的循环方式 for (String player : players) { System.out.println(player); } System.out.println(\"--------------\"); // 使用 lambda 表达式以及函数操作(functional operation) players.forEach((player) -&gt; System.out.println(player)); System.out.println(\"--------------\"); // 在 Java 8 中使用双冒号操作符(double colon operator) players.forEach(System.out::println);[使用lambdas 来实现 Runnable接口]12345678910111213141516171819202122// 使用匿名内部类 1.1 new Thread(new Runnable() { @Override public void run() { System.out.println(\"Hello lambda1\"); } }).start();// 使用 lambda 表达式1.2 new Thread(() -&gt; System.out.println(\"Hello lambda2\")).start();// 使用匿名内部类 2.1 Runnable hello_zlw_lambda1 = new Runnable() { @Override public void run() { System.out.println(\"Hello zlw lambda1\"); } };// 使用 lambda 表达式2.2 Runnable hello_zlw_lambda2 = () -&gt; System.out.println(\"Hello zlw lambda2\"); hello_zlw_lambda1.run(); hello_zlw_lambda2.run();使用Lambdas排序集合在Java中,Comparator 类被用来排序集合。 在下面的例子中,我们将根据球员的 name, surname, name 长度 以及最后一个字母。 和前面的示例一样,先使用匿名内部类来排序,然后再使用lambda表达式精简我们的代码。123456789101112131415// 1.1 使用匿名内部类根据 name 排序String[] players = {\"zlw\",\"joe\",\"qjl\",\"lxl\",\"zc\",\"sam\"};Arrays.sort(players, new Comparator&lt;String&gt;() { @Override public int compare(String o1, String o2) { return (o1.compareTo(o2)); }});// 使用 lambda 表达式以及函数操作(functional operation)Comparator&lt;String&gt; sortName = (String o1, String o2) -&gt; o1.compareTo(o2);Arrays.sort(players,sortName);Arrays.sort(players,(String o1,String o2) -&gt; o1.compareTo(o2));System.out.println(Arrays.toString(players));","link":"/2019/10/25/Java-8-函数编程（lambda表达式）/"},{"title":"LeetCode 1.Two Sum","text":"Two Sum题目描述:给定一个整数数组和一个目标值,找出数组中和为目标值的 两个 数你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。示例给定 nums = [2,7,11,15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回[0,1]解法一[暴力破解法]123456789public static int[] Solution(int[] nums, int target) { for (int i = 0; i &lt; nums.length; i++) { for (int j = i + 1; j &lt; nums.length; j++) { if (target == nums[i] + nums[j]) return new int[]{i, j}; } } throw new IllegalArgumentException(\"not two sum solution\");}解法二[一遍哈希表]12345678910public static int[] Solution2(int[] nums,int target){ Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for(int i = 0; i&lt; nums.length; i++) { if(map.containsKey(target - nums[i])) { return new int[] {map.get(target-nums[i]),i}; } map.put(nums[i], i); } throw new IllegalArgumentException(\"No two sum solution\"); }","link":"/2019/10/20/LeetCode-1-Two-Sum/"},{"title":"LeetCode 13.Roman to Integer","text":"Roman to Integer罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。字符 数值I 1V 5X 10L 50C 100D 500M 1000例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。示例 1:输入: “III”输出: 3示例 2:输入: “IV”输出: 4示例 3:输入: “IX”输出: 9示例 4:输入: “LVIII”输出: 58解释: L = 50, V= 5, III = 3.示例 5:输入: “MCMXCIV”输出: 1994解释: M = 1000, CM = 900, XC = 90, IV = 4.1234567891011121314151617181920public static int romanToInt(String s) { Map&lt;Character,Integer&gt; map = new HashMap&lt;&gt;(); map.put('I',1); map.put('V',5); map.put('X',10); map.put('L',50); map.put('C',100); map.put('D',500); map.put('M',1000); int result = 0; for (int i = 0; i &lt; s.length(); i++) { if(i&gt;0 &amp;&amp; map.get(s.charAt(i)) &gt; map.get(s.charAt(i-1))){ result += map.get(s.charAt(i)) - 2 * map.get(s.charAt(i-1)); }else{ result += map.get(s.charAt(i)); } } return result; }","link":"/2019/10/21/LeetCode-13-Roman-to-Integer/"},{"title":"LeetCode 20.Valid Paretheses","text":"Valid Paretheses(有效的括号)题目描述:给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。有效字符串需满足：1.左括号必须用相同类型的右括号闭合。2.左括号必须以正确的顺序闭合。注意空字符串可被认为是有效字符串。示例 1:输入: “()”输出: true示例 2:输入: “()[]{}”输出: true示例 3:输入: “(]”输出: false示例 4:输入: “([)]”输出: false示例 5:输入: “{[]}”输出: true12345678910111213141516171819202122public boolean isValid(String s) { Deque&lt;Character&gt; stack = new ArrayDeque&lt;&gt;(); for (int i = 0; i &lt; s.length(); i++) { if (s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '[') { stack.push(s.charAt(i)); } else { if (stack.isEmpty()) { return false; } else { if (stack.peek() == '{' &amp;&amp; s.charAt(i) != '}') { return false; } else if (stack.peek() == '(' &amp;&amp; s.charAt(i) != ')') { return false; } else if (stack.peek() == '[' &amp;&amp; s.charAt(i) != ']') { return false; } } stack.pop(); } } return stack.isEmpty(); }","link":"/2019/10/22/LeetCode-20-Valid-Paretheses/"},{"title":"LeetCode 58.Length of Last Word","text":"Length of Last Word(最后一个单词长度)给定一个仅包含大小写字母和空格 ‘ ‘ 的字符串，返回其最后一个单词的长度。如果不存在最后一个单词，请返回 0 。说明：一个单词是指由字母组成，但不包含任何空格的字符串。示例输入: “Hello World”输出: 5解题思路直接从字符串最后开始先前找,总长度–,找到后记录那就是’ ‘之前的长度,再去用 总长度 - 去’ ‘之前的长度 = 最后一个单词的长度12345678910111213public int lengthOfLastWord(String s) { if(s==null || s.length()==0) return 0; String trim = s.trim(); //去掉字符串两边的' '空格 if(trim.length()==0){ return 0; } int n = trim.length() -1; while (n&gt;=0 &amp;&amp; trim.charAt(n)!=' ') { n--; } return trim.length() - 1 -n; }","link":"/2019/10/23/LeetCode-58-Length-of-Last-Word/"},{"title":"LeetCode 66.Plus One","text":"Plus One题目描述:给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。你可以假设除了整数 0 之外，这个整数不会以零开头。示例 1:输入: [1,2,3]输出: [1,2,4]解释: 输入数组表示数字 123。示例 2:输入: [4,3,2,1]输出: [4,3,2,2]解释: 输入数组表示数字 4321。12345678910111213141516171819202122232425262728293031323334public int[] plusOne(int[] digits) { boolean flag = false; int len = digits.length; int[] temp = digits; // 判断最后一位是否进位 if(temp[len-1]+1==10){ temp[len-1]=0; flag = true; }else{ temp[len-1]+=1; return temp; } for (int i = len - 2; i &gt;= 0; i--) { if(flag &amp;&amp; temp[i]+1==10){ // 判断当前位是否有进位 temp[i]=0; flag = true; }else if(flag){ // 当前位没有进位加一退出 temp[i]+=1; flag = false; } } /* 例如 [9,9] 个位进位 0 十位进位 1+9=0 但退出循环了,不能在进位了,数组长度要扩位+1 */ if (flag &amp;&amp; temp[0]==0){ int[] res = new int[len+1]; res[0] =1; return res; } return temp; }","link":"/2019/10/22/LeetCode-66-Plus-One/"},{"title":"LeetCode 7.Reverse Integer","text":"Reverse Integer题目描述:给定一个32位有符号整数，将整数中的数字进行反转示例1:输入:123输入:321示例2:输入:-123输入:-321示例3:输入:120输入:21注意:假设我们的环境只能存储32位有符号整数，其数值范围是[-2^31 , 2^31 -1],如果反转后的整数溢出，返回0.1234567891011public static int Solution(int x){ int rev = 0; while (x!=0){ int pop = x % 10; // 取x的最后一位 x /= 10; // 删除X的最后一位 if(rev &gt; Integer.MAX_VALUE / 10 || rev &lt; Integer.MIN_VALUE /10) //溢出判断 return 0; rev = rev * 10 + pop; //之前的数值向前推进1位加上当前数 } return rev;}https://zlwblog.cn","link":"/2019/10/21/LeetCode-7-Reverse-Integer/"},{"title":"Markdown操作","text":"Markdownd是一种轻量级的标记语言Markdownd编写的文档后缀为.md,.markdownHello World!标题我是一级标题我是二级标题一级标题二级标题三级标题四级标题[格式]123456============------------######1-6个# 表示1-6级标题段落格式1.末尾添加两个空格2.使用空行来换行字体[字体格式]123456*斜体字体*_斜体字体_**粗体字体**__粗体字体__***粗斜体字体***___粗斜体字体___斜体字体斜体字体粗体字体粗体字体粗斜体字体粗斜体字体分割线[分割线格式]12345**** * ******- - ----------删除线和下划线和脚注zlwblogzlwBLOGzlwblog1这是一个脚注^123这是一个脚注列表123123第一项1.11.2第二项2.12.2结束区块zzzzzzllllllwwwwwwwz12311.11.22代码printf()函数test(){12 111;}支持HTML元素https://github/ZlwPickCtrl+Alt+Del重启电脑转义 *","link":"/2019/10/19/Markdown操作/"},{"title":"SQL 语言 - 基础","text":"基础模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。主键的值不允许修改，也不允许复用（不能使用已经删除的主键值赋给新数据行的主键）。SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。[注释]1234## 注释SELECT * FROM mytable -- 注释/*注释1 注释2 */[数据库的创建与使用]12CREATE DATABASE zlwdb;USE zlwdb;[创建表与修改表]1234567891011121314CREATE TABLE mytable( uid INT NOT NULL AUTO_INCREMENT, z1 INT NOT NULL DEFAULT 1, z2 INT VARCHAR(45) NULL, z3 DATE NULL, PRIMARY KEY('id') );}##修改表ALTER TABLE mytableADD z4 CHAR(20);ALTER TABLE mytableDROP COLUMN z4;##删除表DROP TABLE mytable;[插入,更新,删除]1234567891011INSERT INTO mytable(z1,z2) VALUES(va11,val2);## 插入检索出来的数据INSERT INTO mytable1(z1,z2) SELECT z1,z2 FROM mytable2;## 一个表的内容插入到一个新表CREATE TABLE newtable AS SELECT * FROM mytable;UPDATE mytable SET z1 = va11 WHERE uid = 1;DELETE FROM mytable WHERE uid = 1;TRUNCATE TABLE mytable; --也可以清空表，也就是删除所有行[查询]1234567##DISTINCT --去重复，相同的值只会显示一次SELECT DISTINCT z1,z2, FROM mytable;##LIMIT -- 限制返回的行数,可以有两个参数,1.起始行2. 返回的总行数SELECT * FROM mytable LIMIT 5;SELECT * FROM mytable LIMIT 0,5;SELECT * FROM mytable LIMIT 2,3; -- 从第3行到第第5行[排序]12## ASC 升序(默认) DESC 降序SELECT * FROM mytable ORDER BY z1 DESC, z2 ASC;[过滤]1SELECT * FROM mytable WHERE z1 IS NULL;操作符说明=等于单元格单元格&lt; &gt;小于 大于&lt;&gt;!= &lt;=!&gt; &gt;=!&lt;不等于 小于等于 大于等于BETWEEN在两个值之间IS NULL为NULL值AND 和OR 用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用 () 来决定优先级，使得优先级关系更清晰。IN 操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。NOT 操作符用于否定一个条件。通配符通配符也是用在过滤语句中，但它只能用于文本字段。% 匹配 &gt;=0 个任意字符；_ 匹配 ==1 个任意字符；[ ] 可以匹配集合内的字符，例如 [ab] 将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。使用 Like 来进行通配符匹配。不要滥用通配符，通配符位于开头处匹配会非常慢。[]1SELECT * FROM mytable WHERE z1 LIKE '[^AB]' --不以 A 和 B 开头的文本[计算字段]12345SELECT z1 * z2 AS xj FROM mytable;##CONCAT() 用于连接两个字段。许多数据库会使用空格把一个值填充为列宽，##因此连接的结果会出现一些不必要的空格，使用 TRIM() 可以去除首尾空格。SELECT CONCAT(TRIM(z1), '(', TRIM(z2), ')') AS concat_zFROM mytable;函数(MYSQL)函数说明(列)AVG()平均值COUNT()行数MAX() MIN()最大值 最小值SUM()和LEFT() RIGHT()左边的字符 右边的字符LOWER() UPPER()转为小写字符 转为大写字符LTRIM() RTRIM()去除左边的空格 去除右边的空格分组分组就是把具有相同的数据值的行放在同一组中。可以对同一分组数据使用汇总函数进行处理，例如求分组数据的平均值等。指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。[分组]1234SELECT z1,COUNT(*) AS SUM FROM mytable GROUP BY z1;##GROUP BY 自动按分组字段进行排序，ORDER BY 也可以按汇总字段来进行排序。##WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤。SELECT z1,COUNT(*) AS num FROM mytable WHERE z1 &gt; 2 GROUP BY z1 HAVING num &gt;= 2;分组规定：GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；NULL 的行会单独分为一组；大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型未写完[]1","link":"/2019/10/23/SQL-语言-基础/"},{"title":"java-8 方法引用","text":"方法引用: method reference方法引用实际上是个Lambda表达式的一种语法糖我们可以将方法引用看作是一个[函数指针]*方法引用classname::staticmethod*方法调用classname.staticmethod方法引用共分为4类类名::静态方法名引用名(对象名)::实例方法名类名::实例方法名(lambda表达式的第一个参数作为这个方法的调用者,之后的参数作为这个方法的参数)构造方法引用 类名::new默认方法什么是默认方法简单说，就是接口可以有实现方法，而且不需要实现类去实现其方法。只需在方法名前面加个default关键字即可。为什么出现默认方法为什么要有这个特性？首先，之前的接口是个双刃剑，好处是面向抽象而不是面向具体编程，缺陷是，当需要修改接口时候，需要修改全部实现该接口的类，目前的java 8之前的集合框架没有foreach方法，通常能想到的解决办法是在JDK里给相关的接口添加新的方法及实现。然而，对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现。所以引进的默认方法。他们的目的是为了解决接口的修改与现有的实现不兼容的问题。java 8抽象类与接口对比相同点不同点都是抽象类型抽象类不可以多重继承，接口可以（无论是多重类型继承还是多重行为继承）都可以有实现方法（以前接口不行）抽象类和接口所反映出的设计理念不同。其实抽象类表示的是”is-a”关系，接口表示的是”like-a”关系都可以不需要实现类或者继承者去实现所有方法，（以前不行，现在接口中默认方法不需要实现者实现）接口中定义的变量默认是public static final 型，且必须给其初值，所以实现类中不能改变其值；抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以重新赋值。多重继承的冲突由于同一个方法可以从不同接口引入，自然而然的会有冲突的现象，默认方法判断冲突的规则如下：1.一个声明在类里面的方法优先于任何默认方法（classes always win）2.否则，则会优先选取路径最短的。12345678910public interface MyInterface { default void myMethod(){ System.out.println(\"myMethod1!!\"); }}public interface MyInterface1 { default void myMethod(){ System.out.println(\"myMethod2!!\"); }}报错 defaultTest inherits unrelated defaults for myMethod() from types MyInterface and MyInterface1如果一定要这么写呢，同时实现MyInterface,MyInterface1并且使用MyInterface1中myMethod()？可以这么写：12345678910public class defaultTest implements MyInterface,MyInterface1{ public static void main(String[] args) { defaultTest defaultTest = new defaultTest(); defaultTest.myMethod(); } @Override public void myMethod() { MyInterface1.super.myMethod(); }}或者可以这么写:12345678910111213141516public interface MyInterface2 extends MyInterface,MyInterface1 { default void myMethod(){ System.out.println(\"myMethod3!!\"); }}public class defaultTest implements MyInterface2{ public static void main(String[] args) { defaultTest defaultTest = new defaultTest(); defaultTest.myMethod(); } @Override public void myMethod() { MyInterface2.super.myMethod(); }}输出 myMethod3!! 可见MyInterface2.super表示的是MyInterface2接口，同时defaultTest无法访问MyInterface,MyInterface2的myMethod()可见MyInterface2虽然有同一个两个最短路径的myMethod(), 但是它自己有一个更高优先级的myMethod()，所以不会报错;默认方法给予我们修改接口而不破坏原来的实现类的结构提供了便利，目前java 8的集合框架已经大量使用了默认方法来改进了，当我们最终开始使用Java 8的lambdas表达式时，提供给我们一个平滑的过渡体验。也许将来我们会在API设计中看到更多的默认方法的应用。","link":"/2019/10/28/java-8-方法引用/"},{"title":"java-8 lambda 2","text":"关于函数式接口:1.如果一个接口只有一个抽象方法,那么该接口就是一个函数式接口。2.如果我们在某个接口上声明了@FunctionInterface注解,那么编译器就会按照函数式接口的定义来要求该接口。3.如果某个接口只有一个抽象方法,但我们并没有给该接口声明@FunctionInterface注解,那么编译器依旧会将该接口看作是函数式接口。1234567@FunctionalInterfacepublic interface MyInterfae { void test(); // java.lang.Object 是所以类的父类 MyInterfae的实现类一点会直接或者间接的继承Object类 toString String toString();}在其他有lambda表达式语言中,lambda表达式的类型是函数,但在java中，Lambda表达式是对象,他们必须依附于一类特别的对象类型————函数式接口(functional interface)外部迭代最传统的方法是用Iterator，当然还以用for i、增强for循环等等。这一类方法叫做外部迭代，意为显式地进行迭代操作，即集合中的元素访问是由一个处于集合外部的东西来控制的，在这里控制着循环的东西就是迭代器。1234List&lt;String&gt; alphabets = Arrays.asList(new String[] { \"a\", \"b\", \"b\", \"d\" });for (String letter : alphabets) { System.out.println(letter.toUpperCase());}内部迭代顾名思义，这种方式的遍历将在集合内部进行，我们不会显式地去控制这个循环。无需关心遍历元素的顺序，我们只需要定义对其中每一个元素进行什么样的操作。注意在这种设定下可能无法直接获取到当前元素的下标。比如JDK8提供的最新的Collection.forEach(…)方法。1alphabets.forEach(System.out::println);Function接口1234567891011121314151617181920212223242526272829303132333435/** * 代表这一个方法，能够接受一个参数，并且返回一个结果 * @since 1.8 */@FunctionalInterfacepublic interface Function&lt;T, R&gt; { /** * 将参数赋予给相应方法 * * @param t * @return */ R apply(T t); /** * 先执行参数(即也是一个Function)的，再执行调用者(同样是一个Function) */ default &lt;V&gt; Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before) { Objects.requireNonNull(before); return (V v) -&gt; apply(before.apply(v)); } /** * 先执行调用者，再执行参数，和compose相反。 */ default &lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) { Objects.requireNonNull(after); return (T t) -&gt; after.apply(apply(t)); } /** * 返回当前正在执行的方法 */ static &lt;T&gt; Function&lt;T, T&gt; identity() { return t -&gt; t; }}[例子]123456789101112131415161718192021public class TextIDEA { public static void main(String[] args) { TextIDEA TextIDEA = new TextIDEA(); System.out.println(TextIDEA.compute(2,(value) -&gt; value * 3,(value) -&gt; value * value)); // 12 System.out.println(TextIDEA.compute1(2,(value) -&gt; value * 3,(value) -&gt; value * value));// 36 System.out.println(TextIDEA.compute2(2,3,(value1,value2) -&gt; value1 * value2)); // 6 } public int compute(int a, Function&lt;Integer,Integer&gt; function1, Function&lt;Integer,Integer&gt; function2){ return function1.compose(function2).apply(a); } public int compute1(int a, Function&lt;Integer,Integer&gt; function1, Function&lt;Integer,Integer&gt; function2){ return function1.andThen(function2).apply(a); } public int compute2(int a,int b, BiFunction&lt;Integer,Integer,Integer&gt; biFunction){ return biFunction.apply(a,b); } }Predicate123456789101112131415161718192021222324252627282930@FunctionalInterfacepublic interface Predicate&lt;T&gt; { //唯一的抽象方法 boolean test(T t); //且操作，既满足A也满足B条件 default Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; other) { Objects.requireNonNull(other); return (t) -&gt; test(t) &amp;&amp; other.test(t); } //且操作，既满足A也满足B条件 default Predicate&lt;T&gt; negate() { return (t) -&gt; !test(t); } //或操作，满足A条件或者满足B条件 default Predicate&lt;T&gt; or(Predicate&lt;? super T&gt; other) { Objects.requireNonNull(other); return (t) -&gt; test(t) || other.test(t); } //静态方法，判定是否相等 static &lt;T&gt; Predicate&lt;T&gt; isEqual(Object targetRef) { return (null == targetRef) ? Objects::isNull : object -&gt; targetRef.equals(object); }}Predicate123456789@FunctionalInterfacepublic interface Supplier&lt;T&gt; { /** *这个接口是一个提供者的意思，只有一个get的抽象类， *没有默认的方法以及静态的方法，传入一个泛型T的，get方法，返回一个泛型T */ T get();}BinaryOperatorBinaryOperator:对同一类型的两个参数的操作比较操作,返回的和传入参数时相同的 ;binaryOperator 继承制BiFunciton方法1: minBy(comparator):返回的是一个binaryoperator函数接口 函数返回一个最小的对象方法1: maxBy(comparator):返回的是一个binaryoperator函数接口 函数返回一个最大的对象","link":"/2019/10/26/java-8-lambda-2/"},{"title":"平时看的好文章","text":"技术人员的发展之路 –陈皓https://coolshell.cn/articles/17583.html","link":"/2019/10/24/平时看的好文章/"},{"title":"zzz","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.[title] [] [url] [link text]1code snippet","link":"/2019/06/24/周李伟的第一篇文章/"},{"title":"Hello World","text":"","link":"/2019/06/23/hello-world/"},{"title":"java-8 Optional类解析","text":"简介用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为null，只有在非空的前提下才能将其作为其他方法的参数。新版本的Java，比如Java 8引入了一个新的Optional类。Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。of为非null的值创建一个Optional。1234//调用工厂方法创建Optional实例Optional&lt;String&gt; s = Optional.of(\"zlw\");//传入参数为null，抛出NullPointerException.Optional&lt;String&gt; s1 = Optional.of(null);ofNullable为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional。1234//ofNullable与of方法相似，唯一的区别是可以接受参数为null的情况//下面创建了一个不包含任何值的Optional实例//例如，值为'null'Optional&lt;String&gt; empty = Optional.ofNullable(null);isPresent如果值存在返回true，否则返回false。123456//isPresent方法用来检查Optional实例中是否包含值Optional&lt;String&gt; empty = Optional.ofNullable(\"ZLW\"); String name = \"zlw\"; if(empty.isPresent()){ System.out.println(empty.get()); }get如果Optional有值则将其返回，否则抛出NoSuchElementException。12345try { System.out.println(empty.get()); } catch (NoSuchElementException ex) { System.out.println(ex.getMessage()); }ifPresent如果Optional实例有值则为其调用consumer，否则不做处理要理解ifPresent方法，首先需要了解Consumer类。简答地说，Consumer类包含一个抽象方法。该抽象方法对传入的值进行处理，但没有返回值。Java8支持不用接口直接通过lambda表达式传入参数。如果Optional实例有值，调用ifPresent()可以接受接口段或lambda表达式。123//ifPresent方法接受lambda表达式作为参数。//lambda表达式对Optional的值调用consumer进行处理。empty.ifPresent(System.out::println);orElse如果有值则将其返回，否则返回指定的其它值。1234// 值为 nullSystem.out.println(empty.orElse(\"no value\"));// 值为 zlwSystem.out.println(empty.orElse(\"no value\"));orElseGetorElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值123//orElseGet与orElse方法类似，区别在于orElse传入的是默认值，//orElseGet可以接受一个lambda表达式生成默认值。System.out.println(empty.orElseGet(() -&gt; \"no value!\"));orElseThrow如果有值则将其返回，否则抛出supplier接口创建的异常。在orElseGet方法中，我们传入一个Supplier接口。然而，在orElseThrow中我们可以传入一个lambda表达式或方法，如果值不存在来抛出异常123456789try { //orElseThrow与orElse方法类似。与返回默认值不同， //orElseThrow会抛出lambda表达式或方法生成的异常 empty.orElseThrow(ValueAbsentException::new);} catch (Throwable ex) { //输出: No value present in the Optional instance System.out.println(ex.getMessage());}ValueAbsentException定义如下：123456789101112131415class ValueAbsentException extends Throwable { public ValueAbsentException() { super(); } public ValueAbsentException(String msg) { super(msg); } @Override public String getMessage() { return \"No value present in the Optional instance\"; }}map如果有值，则对其执行调用mapping函数得到返回值。如果返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。map方法用来对Optional实例的值执行一系列操作。通过一组实现了Function接口的lambda表达式传入操作。12345//map方法执行传入的lambda表达式参数对Optional实例的值进行修改。//为lambda表达式的返回值创建新的Optional实例作为map方法的返回值。Optional&lt;String&gt; empty = Optional.ofNullable(\"zlw\");Optional&lt;String&gt; newempty = empty.map((value) -&gt; value.toUpperCase());System.out.println(newempty.orElseGet(() -&gt; \"no value!!\"));flatMap如果有值，为其执行mapping函数返回Optional类型返回值，否则返回空Optional。flatMap与map（Funtion）方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。flatMap方法与map方法类似，区别在于mapping函数的返回值不同。map方法的mapping函数返回值可以是任何类型T，而flatMap方法的mapping函数必须是Optional。12345//flatMap与map（Function）非常类似，区别在于传入方法的lambda表达式的返回类型。//map方法中的lambda表达式返回值可以是任意类型，在map函数返回之前会包装为Optional。 //但flatMap方法中的lambda表达式返回值必须是Optionl实例。 Optional&lt;String&gt; empty = Optional.ofNullable(\"zlw\"); System.out.println(empty.flatMap((value) -&gt; Optional.of(value.toUpperCase())).orElseGet(() -&gt; \"no value!!\"));filter如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。可能你已经知道如何为filter方法传入一段代码。是的，这里可以传入一个lambda表达式。对于filter函数我们应该传入实现了Predicate接口的lambda表达式。12345//filter方法检查给定的Option值是否满足某些条件。//如果满足则返回同一个Option实例，否则返回空Optional。Optional&lt;String&gt; empty = Optional.ofNullable(\"zlw\");Optional&lt;String&gt; s = empty.filter((value) -&gt; value.length() &gt; 5);System.out.println(s.orElse(\"The name is less than 6 characters\"));","link":"/2019/10/28/java-8-Optional类解析/"},{"title":"算法的知识体系","text":"算法：1、排序算法：快速排序、归并排序、计数排序2、搜索算法：回溯、递归、剪枝3、图论：最短路径、最小生成树、网络流建模4、动态规划：背包问题、最长子序列、计数问题5、基础技巧：分治、倍增、二分法、贪心算法数据结构：1、数组和链表2、栈与队列3、树和图4、哈希表5、大/小跟堆，可并堆6、字符串：字典树、后缀树两个刷算法题的网站https://leetcode-cn.com/problemset/all/https://www.lintcode.com/problem/","link":"/2019/10/24/算法的知识体系/"},{"title":"练习hexo的发布","text":"[title] [] [url] [link text]1234567---title: #文章标题date: #时间，一般不用改categories: #目录分类tags: #标签，格式可以是[Hexo,总结]，中间用英文逗号分开keywords: #文章关键词，多个关键词用英文逗号隔开---1alert(&apos;Hello World!&apos;);Array.map1array.map(callback[, thisArg])插入图片的方法绝对路径当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。12source/images/image.jpg![](/images/image.jpg)图片既可以在首页内容中访问到，也可以在文章正文中访问到。相对路径图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。_config.yml1post_asset_folder: true将_config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new post_name，在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。12_posts/post_name/image.jpg![](image.jpg)上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。如果希望图片在文章和首页中同时显示，可以使用标签插件语法。12_posts/post_name/image.jpgTime.javaview raw12345678910111213141516171819202122/** * @author zlw * @create 2019-09-11 22:53 */public class Time { public static void main(String[] args) { long startTime = System.currentTimeMillis(); doSomeThing(); long endTime = System.currentTimeMillis(); System.out.println(\"====================\"); System.out.println( (endTime - startTime)+\"ms\"); } public static void doSomeThing(){ for (int i = 0; i &lt; 100; i++) { for (int j = 0; j &lt; 100; j++) { System.out.println(i * j); } } }}","link":"/2019/10/18/练习hexo的发布/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"IDEA","slug":"IDEA","link":"/tags/IDEA/"},{"name":"java 8","slug":"java-8","link":"/tags/java-8/"},{"name":"LeetCode","slug":"LeetCode","link":"/tags/LeetCode/"},{"name":"算法","slug":"算法","link":"/tags/算法/"},{"name":"写作","slug":"写作","link":"/tags/写作/"},{"name":"前端","slug":"前端","link":"/tags/前端/"},{"name":"SQL语言","slug":"SQL语言","link":"/tags/SQL语言/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"练习","slug":"练习","link":"/tags/练习/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"IDEA","slug":"IDEA","link":"/categories/IDEA/"},{"name":"java","slug":"java","link":"/categories/java/"},{"name":"LeetCode","slug":"LeetCode","link":"/categories/LeetCode/"},{"name":"前端","slug":"前端","link":"/categories/前端/"},{"name":"数据库基础和原理","slug":"数据库基础和原理","link":"/categories/数据库基础和原理/"},{"name":"数据结构","slug":"数据结构","link":"/categories/数据结构/"}]}