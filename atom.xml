<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zlwblog</title>
  
  <subtitle>zlwblog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-12T13:54:28.464Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zlw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx 简介和安装</title>
    <link href="http://yoursite.com/2020/02/12/Nginx-%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2020/02/12/Nginx-简介和安装/</id>
    <published>2020-02-12T05:12:48.000Z</published>
    <updated>2020-02-12T13:54:28.464Z</updated>
    
    <content type="html"><![CDATA[<p>　　1</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么?"></a>Nginx是什么?</h2><p>是一个高性能的HTTP和反向代理web服务器.</p><h2 id="为什么使用Nginx"><a href="#为什么使用Nginx" class="headerlink" title="为什么使用Nginx?"></a>为什么使用Nginx?</h2><p>在传统的Web项目中,并发量小,用户使用的少.</p><p>所以在低并发的情况下,用户可以直接访问tomcat服务器,然后tomcat服务器返回消息给用户。<br>用户访问&lt;—&gt;Tomcat服务器</p><p>在互联网项目下,因单个Tomcat默认并发量有限,会产生如下问题:<br>1.用户并发大的情况下,单个Tomcat服务器无法支撑.<br>1.1 垂直 (扩展服务器的设备,买更好的服务器,来扩大Tomcat的并发量)<br>1.2 水平<br>(线性扩展 多个Tomcat服务器来支持用户的请求)<br>问题: 用户需要记很多个服务器地址,用户根本不知道哪台服务器是忙闲?<br>这时候Nginx完美解决。</p><h1 id="Nginx特点"><a href="#Nginx特点" class="headerlink" title="Nginx特点"></a>Nginx特点</h1><p>1.高并发,高可用,高性能<br>2.可扩展性好<br>3.热部署<br>4.BSD许可证</p><h1 id="代理的概念"><a href="#代理的概念" class="headerlink" title="代理的概念"></a>代理的概念</h1><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>是一个位于客户端和原始服务器之间的服务器,为了从原始服务器取得内容,客户端向代理发送一个请求并指定目标(原始服务器),然后代理向原始服务器转交请求并将获得的内容返回客户端,客户端才能使用正向代理.<br><img src="/images/linux/nginx/正向代理.png" width="500px" height="600px"></p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理方式是指以代理服务器来接受internet上的连接请求,然后将请求转发给内部网络上的服务器,并将服务器上得到的结果返回给internet上请求连接的客户端,此时代理服务器对外就表现为一个反向代理服务器.<br><img src="/images/linux/nginx/反向代理.png" width="500px" height="600px"></p><h2 id="两者之间的区别"><a href="#两者之间的区别" class="headerlink" title="两者之间的区别"></a>两者之间的区别</h2><p>正向代理,是在客户端的.(VPN)<br>反向代理,是作用在服务器端的,是一个虚拟IP(VIP)</p><h1 id="安装-linux下"><a href="#安装-linux下" class="headerlink" title="安装(linux下)"></a>安装(linux下)</h1><p>1.一键安装四个依赖包<br>yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</p><p>2.下载Nginx,解压</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">mkdir nginx</span><br><span class="line">cd nginx/</span><br><span class="line">#下载安装Nginx</span><br><span class="line">wget http://nginx.org/download/nginx-1.13.11.tar.gz</span><br><span class="line">#先切换到opt目录下，新建文件夹nginx-1-13</span><br><span class="line">cd nginx-1.13.11</span><br><span class="line">./configure  --prefix=/opt/nginx-1-13      #指定安装目录</span><br></pre></td></tr></table></figure><p>3：在/opt/nginx/nginx-1.13.11目录下执行编译命令</p><p>make</p><p>4:执行安装命令</p><p>make install</p><p>5:切换到安装目录</p><p>cd /opt/nginx-1-13</p><p>6:启动</p><p>cd sbin/</p><p>./nginx<br>./nginx -s stop<br>./nginx -s quit<br>./nginx -s reload<br>./nginx -s quit:此方式停止步骤是待nginx进程处理任务完毕进行停止。<br>./nginx -s stop:此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　1&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux 学习日志-9</title>
    <link href="http://yoursite.com/2020/02/12/Linux-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-9/"/>
    <id>http://yoursite.com/2020/02/12/Linux-学习日志-9/</id>
    <published>2020-02-12T05:10:07.000Z</published>
    <updated>2020-02-12T05:14:41.685Z</updated>
    
    <content type="html"><![CDATA[<p>一些基本的命令练习</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些基本的命令练习&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 学习日志-8</title>
    <link href="http://yoursite.com/2020/02/10/Linux-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-8/"/>
    <id>http://yoursite.com/2020/02/10/Linux-学习日志-8/</id>
    <published>2020-02-10T05:21:15.000Z</published>
    <updated>2020-02-12T06:16:46.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shell是什么"><a href="#shell是什么" class="headerlink" title="shell是什么"></a>shell是什么</h1><p>shell是一个命令行解释器,他为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序,用户可以用shell来启动,挂起,暂停,编写一些程序.</p><a id="more"></a> <img src="/images/linux/shell.png" width="200px" height="400px"> document.querySelector('video').playbackRate = 3.0; ## 脚本格式要求 1.脚本以#!/bin/bash 开头 2.脚本需要有可执行权限<h2 id="脚本的常用执行方式"><a href="#脚本的常用执行方式" class="headerlink" title="脚本的常用执行方式"></a>脚本的常用执行方式</h2><p>首先要赋予执行的权限<br>1.直接输入文件的路径(绝对,相对都可以)<br>2.sh ./helloworld.sh(不需要赋权限)</p><h1 id="shell的变量"><a href="#shell的变量" class="headerlink" title="shell的变量"></a>shell的变量</h1><p>1.liunx shell中的变量分为<font color="red">系统变量</font>和<font color="red">用户自定义变量</font><br>1.1系统变量: $HOME $PWD $SHELL $USER<br>1.2显示当前shell中的所有变量:set</p><h2 id="shell变量的定义"><a href="#shell变量的定义" class="headerlink" title="shell变量的定义"></a>shell变量的定义</h2><p>基本语法(在引用变量时需要使用$)<br>定义变量: 变量=值<br>撤销变量 unset 变量(赋null)<br>声明静态变量: readnoly 变量(<font color="red">不能unset</font>) 定义变量的规则<br>1.变量名可以由字母、数字和下划线组成,但是不能以数字开头。<br>2.等号两侧不能有空格<br>3.变量名称一般习惯为大写</p><h2 id="将命令的返回值赋值给变量"><a href="#将命令的返回值赋值给变量" class="headerlink" title="将命令的返回值赋值给变量"></a>将命令的返回值赋值给变量</h2><p>1.A=<code>ls -la</code><br>2.A=$(ls -la)</p><h2 id="编写属于自己的环境变量"><a href="#编写属于自己的环境变量" class="headerlink" title="编写属于自己的环境变量"></a>编写属于自己的环境变量</h2><p>在/etc/profile 编写,编写完成后需要刷新该文件source</p><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释:"></a>多行注释:</h2><p>:&lt;&lt;! ZLW=”ZLW”<br>echo “$ZLW”<br>!</p><h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><p>执行一个shell脚本时,如果希望获取到命令行的参数信息,就可以使用位置参数变量(类似于方法传参的形式)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./Myshell.sh 100 200 300</span><br></pre></td></tr></table></figure><ol><li>$n (n为数字,0代表命令本身,1-9为第一到第九个参数,大于10需要用大括号包含,如${10})</li><li>$* (所有参数看成一个整体)</li><li>$@ (也代表所有参数,但每个参数区分对待)</li><li>$# (参数的个数)</li></ol><h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><p>事先已经定义好的变量,可以直接在shell脚本中使用<br>1.$$ (当前进程的进程号(PID))<br>2.$! (后台运行的最后一个进程的进程号)<br>3.$? (最后一次执行的命令的返回状态)</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>基本语法<br>1.$((运算式)) 或 $[运算式]<br>2.expr m + n (expr运算符间要有空格)<br>3.expr m - n<br>4.expr * / % (乘,除,取余)</p><p>#第一种方式<br>RESULT1=$(((2+3)<em>4))<br>RESULT2=$[(2+3)</em>4]<br>echo “结果1=$RESULT1”<br>echo “结果2=$RESULT2”</p><p>#第二种方式<br>RESULT3=<code>expr 2 + 3</code><br>RESULT4=<code>expr $RESULT3 \* 4</code><br>echo “RESULT4=$RESULT4”</p><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p>基本语法<br>[ condition ] (condition前后要有空格)<br>非空返回 true</p><h2 id="两个整数的比较"><a href="#两个整数的比较" class="headerlink" title="两个整数的比较"></a>两个整数的比较</h2><p>= 字符串比较<br>-lt 小于(less than)<br>-le 小于等于(less equal)<br>-eq 等于(equal)<br>-gt 大于(greater than)<br>-ge 大于等于(greater equal)<br>-ne 不等于(not equal)</p><h2 id="按照文件的权限进行判断"><a href="#按照文件的权限进行判断" class="headerlink" title="按照文件的权限进行判断"></a>按照文件的权限进行判断</h2><p>-r<br>-w<br>-x</p><h2 id="按照文件的类型进行判断"><a href="#按照文件的类型进行判断" class="headerlink" title="按照文件的类型进行判断"></a>按照文件的类型进行判断</h2><p>-f (文件存在并且是一个常规的文件)<br>-e (文件存在)<br>-d (文件存在并是一个目录)</p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if-判断"><a href="#if-判断" class="headerlink" title="if 判断"></a>if 判断</h2><p>基本语法(两种方式,中括号和条件判断式之间必须有空格)<br>1.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ];then</span><br><span class="line">程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">elif[ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><details><summary>案例展开查看</summary><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">if [ $1 -ge 60 ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;及格&quot;</span><br><span class="line">elif [ $1 -lt 60 ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;不及格&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></details><h2 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h2><p>基本语法</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">case $变量名 in </span><br><span class="line">&quot;值1&quot;)</span><br><span class="line">值为1的程序段</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;)</span><br><span class="line">值为1的程序段</span><br><span class="line">;;</span><br><span class="line">&quot;值3&quot;)</span><br><span class="line">值为1的程序段</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"> 以上值都不是执行该语句</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><details><summary>案例展开查看</summary><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;1&quot;)</span><br><span class="line">        echo &quot;周一&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;2&quot;)</span><br><span class="line">        echo &quot;周二&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;3&quot;)</span><br><span class="line">        echo &quot;周三&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">        echo &quot;xxxxxxxx&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></details><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>基本语法 (这就要用到之前的位置变量)<br>1.跟Python很类似</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3</span><br><span class="line">do </span><br><span class="line">   程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>2.跟java很类似</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for((初始值;循环控制条件;变量变化))</span><br><span class="line">do </span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure><details><summary>案例展开查看</summary><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">for i in &quot;$*&quot;</span><br><span class="line">do</span><br><span class="line">        echo &quot;$i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;--------------------------------&quot;</span><br><span class="line">for z in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">        echo &quot;$z&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">SUM=0</span><br><span class="line">for((i=1;i&lt;=100;i++))</span><br><span class="line">do</span><br><span class="line">        SUM=$[$SUM + $i]</span><br><span class="line">done</span><br><span class="line">echo &quot;$SUM&quot;</span><br></pre></td></tr></table></figure></details><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><p>基本语法</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SUM=0</span><br><span class="line">i=0</span><br><span class="line">while [ $i -le $1 ]</span><br><span class="line">do</span><br><span class="line">        SUM=$[$SUM+$i]</span><br><span class="line">        i=$[$i+1]</span><br><span class="line">done</span><br><span class="line">echo &quot;sum=$SUM&quot;</span><br></pre></td></tr></table></figure><h2 id="read-读取控制台输入"><a href="#read-读取控制台输入" class="headerlink" title="read 读取控制台输入"></a>read 读取控制台输入</h2><p>基本语法<br>read (选项)(参数)<br>-p (指定读取值时的提示符)<br>-t (指定提示的时间,超过就不在等待,单位是秒)</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;输入数字:&quot; NUM</span><br><span class="line">echo &quot;num=$NUM&quot;</span><br><span class="line"></span><br><span class="line">read -t 10 -p &quot;输入数字:&quot; NUM1</span><br><span class="line">echo &quot;NUM1=$NUM1&quot;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>1.系统函数<br>basename[pathname][suffix]<br>功能:返回完整路径最后/部分,常用于获取文件名<br>suffix为后缀,在返回结果是会被去掉<br>basename ./zlw.txt .txt</p><p>dirname<br>功能:返回完整路径最后/部分前面的部分,跟basename相反<br>dirname /home/zlw/shellzlw/zlw.txt</p><p>2.自定义函数</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#不需要形参</span><br><span class="line">function getSum()&#123;</span><br><span class="line">        NUM=$[$N1 + $N2]</span><br><span class="line">        echo &quot;$NUM&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read -p &quot;输入第一个参数:&quot; N1</span><br><span class="line">read -p &quot;输入第二个参数:&quot; N2</span><br><span class="line"></span><br><span class="line">#方法调用</span><br><span class="line">getSum $N1 $N2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;shell是什么&quot;&gt;&lt;a href=&quot;#shell是什么&quot; class=&quot;headerlink&quot; title=&quot;shell是什么&quot;&gt;&lt;/a&gt;shell是什么&lt;/h1&gt;&lt;p&gt;shell是一个命令行解释器,他为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序,用户可以用shell来启动,挂起,暂停,编写一些程序.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>java-jvm篇1</title>
    <link href="http://yoursite.com/2020/02/04/java-jvm%E7%AF%871/"/>
    <id>http://yoursite.com/2020/02/04/java-jvm篇1/</id>
    <published>2020-02-04T08:43:01.000Z</published>
    <updated>2020-02-04T13:40:06.450Z</updated>
    
    <content type="html"><![CDATA[<p>jvm帮你做内存管理</p><a id="more"></a><p><img src="/images/java/jvm/jdk,jre,jvm.png" alt></p><p>打比方，就是把一段代码进入jvm进行分解,个个部分进入不同的区块<br><img src="/images/java/jvm/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%BA.png" alt><br>程序计算器:指向当前线程正在执行的字节码指令的地址 行号(线程进行切换时继续保存一些的数据)<br>jvm栈:存储当前线程运行方法所需要的数据、指令、返回地址<br>本地方法栈：功能和特点类似于虚拟机栈，均具有线程隔离的特点以及都能抛出StackOverflowError和OutOfMemoryError异常。<br>方法区:类信息,常量(1.7后有变化),静态变量,jit<br><font color="red">heap:</font></p><p>jvm 内存模型 JMM</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jvm帮你做内存管理&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Linux 学习日志-7</title>
    <link href="http://yoursite.com/2020/01/19/Linux-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-7/"/>
    <id>http://yoursite.com/2020/01/19/Linux-学习日志-7/</id>
    <published>2020-01-19T08:24:11.000Z</published>
    <updated>2020-02-11T13:31:32.027Z</updated>
    
    <content type="html"><![CDATA[<p>组管理和权限管理</p><a id="more"></a><p>[chgrp] 改变文件所属群组<br>[chown] 改变文件拥有者</p><p>改变用户所在的组<br>usermod -g 组名 用户名</p><p>groups 查询所有的组</p><p>chown newuser:newgroup file 改变用户的拥有者和所在组<br>-r 目录下面的所有东西都改变</p><h1 id="crond-任务调度"><a href="#crond-任务调度" class="headerlink" title="crond 任务调度"></a>crond 任务调度</h1><p>crontab [选项]<br>| -e | 编辑crontab定时任务 |<br>| -i | 查询crontab任务 |<br>| -r | 删除当前用户所有的crontab任务 |</p><p>参数细节<br>| / | 含义 | 范围 |<br>| :—-:| :—-: | :—-: |<br>| 第一个”*” | 一小时当中的第几分钟 | 0-59 |<br>| 第二个”*” | 一天当中的第几小时 | 0-23 |<br>| 第三个”*” | 一月当中的第几天 | 0-31 |<br>| 第四个”*” | 一年当中的第几月 | 1-12 |<br>| 第五个”*” | 一周当中的星期几 | 0-7 |</p><p>特殊符号<br>| 特殊符号 | 含义 |<br>| :—-:| :—-: |<br>| * | 一小时当中的第几分钟 |<br>| 第二个”*” | 一天当中的第几小时 |<br>| 第三个”*” | 一月当中的第几天 |<br>| 第四个”*” | 一年当中的第几月 |<br>| 第五个”*” | 一周当中的星期几 |</p><p>linux分区<br>硬盘 linux的文件系统<br>分区一 /<br>分区二 boot mnt…<br>。。。<br>。。。</p><p>分区挂载到目录(mount挂载和umount卸载)<br>查看系统的分区和挂载的情况<br>lsblk -f</p><p>如何添加一块硬盘<br>1.虚拟机添加硬盘(当添加之后lsblk中并没有新的硬盘的信息,需要虚拟机重启)<br>2.分区(fdisk 地址)<br>3.格式化()<br>4.挂载<br>5.设置自动挂载</p><p>查询系统磁盘的整体使用情况<br>df -lh</p><p>查询某一特定的目录的使用情况<br>du -h /….<br>-h 带计量单位<br>-a 带文件<br>-c 列出明细的同时,增加汇总值<br>–max-depth=1 子目录深度</p><p>统计指定目录下文件的数目<br>ls -l /home/zlw | grep “^-“ | wc -l</p><p>统计指定目录下目录的数目<br>ls -l /home/zlw | grep “^ d” | wc -l</p><p>统计指定目录下文件的数目,包括子文件下的<br>ls -lR /home/zlw | grep “^-“ | wc -l</p><p>统计指定目录下目录的数目 ,包括子文件下的<br>ls -lR /home/zlw | grep “^ d” | wc -l</p><p>用树状显示目录<br>yun install tree</p><p>RPM==&gt;&gt;下载包的打包及安装工具(类似于windows中的setup.exe)</p><p>查询已经安装的的rpm列表<br>rpm -qa | grep XX</p><p>查询rpm安装的软件信息<br>rpm -qi XXX</p><p>查询rpm包的文件安装在哪<br>rpm -ql XXX</p><p>查询某个文件所有那个rpm包<br>rpm -qf XXX</p><p>删除rpm包<br>rpm -e rpm包的名称</p><p>强制删除(在某些情况下你要删除的包可能跟其他的包有依赖在删除之后可以会出现错误)<br>rpm -e –nodeps foo</p><p>用rpm安装包<br>rpm -ivh</p><ul><li>install 安装</li><li>verbose 提示</li><li>hash 进度条</li></ul><p>安装的步骤<br>1.先找到要安装rpm包,然后需要挂载安装的centos的iso文件,然后到/media/下去找rpm</p><p>2.copy出来在安装</p><p>YUN 是基于rpm包管理,能够从指定的服务器自动下载rpm包并安装&lt;fontcolor=”red”&gt;可以自动处理依赖性关系</p><p>查看yum 服务器是否需要安装的软件<br>yum list | grep firefox</p><p>安装<br>yum install firefox</p><p>安装jdk,配置java环境<br>1.先将软件通过xftp5继续远程上传到 /opt 下<br>2.解压到/opt<br>3.配置环境变量的配置文件 vim /etc/profile<br>4.JAVA_HOME=/opt/jdk1.7.0_79<br>5.PATH=/opt/jdk1.7.0_79/bin:$PATH<br>6.export JAVA_HOME PATH</p><p>安装tomcat<br>1.解压apache-tomcat-7.0.70.tar</p><p>2.cd 到apache-tomcat-7.0.70.tar/bin<br>./startup.sh (启动)</p><p>如果想要windows上访问Linux的<a href="http://localhost:8080就需要linux放行8080端口" target="_blank" rel="noopener">http://localhost:8080就需要linux放行8080端口</a></p><p>window中telnet服务记得打开<br>telnet 192.168.0.116 8080<br>OS7 firewall-cmd –zone=public –list-ports</p><p>firewall-cmd –permanent –zone=public –add-port=80/tcp<br>Centos7:firewall-cmd –permanent –add-port=8080/tcp<br>–zone #作用域–add-port=80/tcp #添加端口，格式为：端口/通讯协议–permanent #永久生效，没有此参数重启后失效<br>//firewall-cmd –reload</p><p>telnet成功而打不开的先试试本地是否打开，然后看看防火墙端口centos7可以看systemctl status firewalld，或者用以前的ps和top都能看到，要活学活用</p><p>eclipse的安装<br>1.解压到/opt中<br>2.配置jre和server<br>3.编写jsp测试</p><p>MySQL安装和配置<br>1.卸载旧版本<br>-rpm -qa | grep mysql<br>有删除,没有下一步<br>2.安装mysql<br>安装编译代码需要的包<br>yum -y install make gcc-c++ cmake bison-devel ncurses-devel</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql</span><br><span class="line">-DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc</span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1</span><br><span class="line">-DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_READLINE=1</span><br><span class="line">-DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DMYSQL_TCP_PORT=3306</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 -DWITH_PARTITION_STORAGE_ENHINE=1</span><br><span class="line">-DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci</span><br></pre></td></tr></table></figure><p>3.make &amp;&amp; make install (此过程按照时间很长)</p><p>4.查看是否有MySQL用户及用户组</p><p>cat /etc/passwd 查看用户<br>cat /etc/proup 查看组<br>没有创建</p><p>修改 ls -al /usr/local/mysql的权限,交给mysql组<br>chown -R mysql:mysql /usr/local/mysql/<br>5.初始化mysql<br>cd /usr/local/mysql/<br>scripts/mysql_install_db –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data –user=mysql</p><p>mv /etc/my.cnf /etc/my.cnf.bak</p><p>6.启动mysql<br>cp support-files/mysql.server /etc/init.d/mysql</p><p>chkconfig mysql on<br>设置默认启动</p><p>service mysql start</p><p>netstat -anp |more (查看3306端口)</p><p>7.修改root的密码<br>cd /usr/local/mysql/bin</p><p>./mysql -uroot</p><p>SET PASSWORD = PASSWORD(‘weiwei1998’);</p><p>quit退出</p><p>再次进入 ./mysql -u root -p</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组管理和权限管理&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 学习日志-6</title>
    <link href="http://yoursite.com/2020/01/14/Linux-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-6/"/>
    <id>http://yoursite.com/2020/01/14/Linux-学习日志-6/</id>
    <published>2020-01-14T10:55:18.000Z</published>
    <updated>2020-02-10T07:07:59.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vi-跟-vim-编辑器"><a href="#vi-跟-vim-编辑器" class="headerlink" title="vi 跟 vim 编辑器"></a>vi 跟 vim 编辑器</h1><a id="more"></a><h2 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h2><p>可以使用快捷键<br>yy复制当前行, 5yy复制当前以下5行 p粘贴<br>dd 删除<br>G 最末行<br>gg 最首行<br>u 撤销之前写的<br>10gg<br>查找某关键字 /XXXX n 下一个</p><h2 id="插入模式-编辑模式"><a href="#插入模式-编辑模式" class="headerlink" title="插入模式(编辑模式)"></a>插入模式(编辑模式)</h2><p>可以输入内容,按i、I,o、O等进入</p><h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2><p>可以完成读取,存盘,替换,离开等操作<br>q 打开后没有修改<br>wq 打开后修改了<br>q! 强制保存<br>set nu 设置行数<br>set nonu 取消行数<br>习惯性的会按Ctrl+s vim会进入假死状态,按Ctrl+q退出该状态</p><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>useradd [选项] -d 指定目录 (每个用户必须在一个组里面,新创建的一个组在以自己名字的组中)<br>useradd -g 组名 用户名</p><p>passwd 设置密码</p><p>userdel 删除用户 保存家目录 [-r] 家目录一起删除</p><h2 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h2><p>id 用户名<br>su - 切换到root<br>su - 用户名 切换到普通用户<br>exit 回到原来的用户</p><h2 id="添加组"><a href="#添加组" class="headerlink" title="添加组"></a>添加组</h2><p>groupadd 组名<br>groupdel 组名</p><h2 id="修改用户所在的组"><a href="#修改用户所在的组" class="headerlink" title="修改用户所在的组"></a>修改用户所在的组</h2><p>usermod -g 组名 用户名</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>用户信息配置文件<br>etc/passwd<br>其中行的每一个项的意义<br>用户名 口令 用户id 组id 家目录 登录shell</p><p>组配置文件<br>etc/group<br>其中行的每一个项的意义<br>组名 口令 组内成员列表 组id</p><p>口令配置文件(密码和登录信息,是加密的)<br>etc/shadow<br>其中行的每一个项的意义<br>登录名 加密口令 最后一次修改时间 最小间隔 最大时间间隔等等</p><h1 id="Linux的运行级别"><a href="#Linux的运行级别" class="headerlink" title="Linux的运行级别"></a>Linux的运行级别</h1><ol start="4"><li>描述linux运行级别0-6的各自含义（记时1分钟）<br>0：关机<br>1：单用户模式<br>2：无网络支持的多用户模式<br>3：有网络支持的多用户模式（文本模式，工作中最常使用的模式）<br>4：保留，未使用<br>5：有网络支持有X-Window支持的多用户模式<br>6：重新引导系统，即重启</li></ol><p>文件在/etc/inittab中</p><p>init [012356]</p><h1 id="常用的指令"><a href="#常用的指令" class="headerlink" title="常用的指令"></a>常用的指令</h1><h2 id="帮助类指令"><a href="#帮助类指令" class="headerlink" title="帮助类指令"></a>帮助类指令</h2><p>man [命令或者配置文件]</p><p>help [命令]</p><h2 id="目录类指令"><a href="#目录类指令" class="headerlink" title="目录类指令"></a>目录类指令</h2><p>pwd<br>ls<br>cd<br>mkdir [选项] -p 多级 要创建的目录<br>rmdir [选项] -rf 只能删除空目录 否则加rf<br>ch 文件名1 文件名2<br>cp [选项]-r 源 目的<br>rm [选项] -r 递归 -f 强制(force) 文件名<br>mv 文件名1地址 文件名2地址</p><p>cat -n 文件地址 |more(一次性全部加载) less(懒加载)<br>more 文件地址<br>less 文件地址</p><p>&gt; 文件 列表内容写入文件a.txt中 覆盖</p><p>&gt;&gt; 文件 列表的内容追加到文件a.txt的末尾</p><p>cat 文件1 &gt; 文件2 覆盖<br>cat 文件1 &gt;&gt; 文件2 追加</p><p>echo “内容” &gt; 文件<br>echo “内容” &gt;&gt; 文件</p><p>echo $PATH</p><p>head [-n] 文件 显示文件的前10行<br>tail [-n] 文件 显示文件的后10行<br>tail -f 文件</p><p>history 查看历史执行的指令<br>history n 查看最后n条指令</p><p>ln -s 源文件地址 链接名<br>删除链接<br>rm -rf 链接名 (切记链接名后面不可以加/ 要不然把链接地址下面的东西全部删除)</p><h1 id="查找类指令"><a href="#查找类指令" class="headerlink" title="查找类指令"></a>查找类指令</h1><p>find [查找范围] [选项] -name 文件名(可以用正则表达式)</p><p>find [查找范围] -user 用户名 (显示指定的用户的所有文件)</p><p>+n大于 -n小于 n等于<br>find [查找范围] -size +nM(k G)</p><p>快速定位通过locate数据库找到文件路径<br>updatedb</p><p>| 表示将前一个命令的处理结果输出传递给后面的命令处理</p><p>过滤查找 一般配合管道使用<br>grep [选项] 查找内容 源文件<br>-n 显示匹配行<br>-i 忽略大小写</p><h1 id="压缩与解压缩指令"><a href="#压缩与解压缩指令" class="headerlink" title="压缩与解压缩指令"></a>压缩与解压缩指令</h1><p>gzip 文件名 (压缩完之后 原来的文件不保留)<br>gunzip 文件名</p><p>zip [选项] XXX.zip 将要压缩的内容(文件或者目录)<br>-r<br>unzip [选项] [指定解压到的目录] XXX.zip<br>-d 指定解压到的目录</p><p><font color="red">tar 指令(打包指令.tar.gz)</font><br>选项<br>-c 产生.tar打包文件<br>-v 显示详细信息<br>-f 指定压缩后的文件名<br>-z 打包同时压缩<br>-x 解压.tar文件</p><p>tar -czvf zlw.tar.gz zlw.py zlw1.py</p><p>解压文件</p><p>tar -xzvf zlw.tar.gz(默认的本目录) -C [指定的目录]</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vi-跟-vim-编辑器&quot;&gt;&lt;a href=&quot;#vi-跟-vim-编辑器&quot; class=&quot;headerlink&quot; title=&quot;vi 跟 vim 编辑器&quot;&gt;&lt;/a&gt;vi 跟 vim 编辑器&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 198 House Robber</title>
    <link href="http://yoursite.com/2020/01/06/LeetCode-198-House-Robber/"/>
    <id>http://yoursite.com/2020/01/06/LeetCode-198-House-Robber/</id>
    <published>2020-01-06T15:30:13.000Z</published>
    <updated>2020-01-06T15:39:50.178Z</updated>
    
    <content type="html"><![CDATA[<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><a id="more"></a><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> [1,2,3,1]<br><strong>输出:</strong> 4<br><strong>解释:</strong> 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。偷窃到的最高金额 = 1 + 3 = 4 。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> [2,7,9,3,1]<br><strong>输出:</strong> 12<br><strong>解释:</strong> 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。偷窃到的最高金额 = 2 + 9 + 1 = 12 。</p></blockquote><p>经典的动态规划题目,这一题要好好品一下,对于房屋,我们就只有偷还是不偷这两选项,</p><p>这个大佬讲的动态规划思路好理解👇:<br><a href="https://www.bilibili.com/video/av16544031" target="_blank" rel="noopener">https://www.bilibili.com/video/av16544031</a></p><figure class="highlight java hljs"><figcaption><span>tetle:解法一</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length + <span class="hljs-number">1</span>];</span><br><span class="line">        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;</span><br><span class="line">        dp[<span class="hljs-number">1</span>] = nums[<span class="hljs-number">0</span>];</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= nums.length; i++)</span><br><span class="line">            dp[i] = Math.max(dp[i - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">2</span>] + nums[i - <span class="hljs-number">1</span>]);</span><br><span class="line">        <span class="hljs-keyword">return</span> dp[nums.length];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。&lt;/p&gt;&lt;p&gt;给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java-基础篇1</title>
    <link href="http://yoursite.com/2020/01/01/Java-%E5%9F%BA%E7%A1%80%E7%AF%871/"/>
    <id>http://yoursite.com/2020/01/01/Java-基础篇1/</id>
    <published>2020-01-01T13:54:42.000Z</published>
    <updated>2020-01-04T15:29:11.984Z</updated>
    
    <content type="html"><![CDATA[<p>距上次学习Java基础已经过去2年多了,现在或多或少忘记了一些知识点,正好这次期末要考Java基础,在此重新把Java基础过一遍,查漏补缺,加深印象.</p><a id="more"></a><h2 id="Java的基础程序设计结构"><a href="#Java的基础程序设计结构" class="headerlink" title="Java的基础程序设计结构"></a>Java的基础程序设计结构</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th align="center">类型</th><th align="center">储存需求</th><th align="center">包装类型</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">1字节</td><td align="center">Byte</td></tr><tr><td align="center">char</td><td align="center">2字节</td><td align="center">Character</td></tr><tr><td align="center">int</td><td align="center">4字节</td><td align="center">Integer</td></tr><tr><td align="center">short</td><td align="center">2字节</td><td align="center">Short</td></tr><tr><td align="center">long</td><td align="center">8字节</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">4字节</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">8字节</td><td align="center">Double</td></tr><tr><td align="center">boolean</td><td align="center">1,0</td><td align="center">Boolean</td></tr></tbody></table><p>在Java中,整型、实型和字符型被视为简单数据类型,这些类型由低级到高级分别为:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（<span class="hljs-keyword">byte</span>、<span class="hljs-keyword">short</span>、<span class="hljs-keyword">char</span>）---&gt; <span class="hljs-keyword">int</span> ---&gt; <span class="hljs-keyword">long</span> ---&gt; folat ---&gt; <span class="hljs-keyword">double</span></span><br></pre></td></tr></table></figure><h4 id="自动装箱和自动拆箱"><a href="#自动装箱和自动拆箱" class="headerlink" title="自动装箱和自动拆箱"></a>自动装箱和自动拆箱</h4><p>装箱===&gt; 基本数据类型转换为包装器类型.<br>拆箱===&gt; 包装器类型转换为基本数据类型.</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="hljs-number">1111</span>;  <span class="hljs-comment">//装箱</span></span><br><span class="line"><span class="hljs-keyword">int</span> n = i;      <span class="hljs-comment">//拆箱</span></span><br></pre></td></tr></table></figure><p>int 和 Integer 区别<br>1.Integer是int的包装类,int是基本数据类型<br>2.Integer变量必须实例化之后才可以使用,int可以直接使用<br>3.Integer默认值是null,int是0<br><font color="red">String、StringBuffer、StringBuilder区别(面试常问)</font><br>从三个方面去回答(可变、线程安全、String不变有什么好处)</p><ul><li>1.是否可变:<ul><li>1.1 String不能进行修改,若修改则是重新创建一个String对象</li><li>1.2StringBuffer、StringBuilder则是直接对本身String对象进行修改,append()等方法</li></ul></li><li>2.是否线程安全:<ul><li>2.1String对象定义之后不能改变,所以线程安全</li><li>2.2StringBuffer是线程不安全的,适用于单线程下操作字符串缓冲区大量数据.</li><li>2.3StringBuffer:是线程安全的(对调用方法加入同步锁),执行效率较慢,适用于多线程下操作字符串缓冲区大量数据.</li></ul></li><li>3.String不可变有什么好处？<ul><li>3.1可以缓存 hash 值</li><li>3.2String Pool 的需要</li><li>3.3线程安全</li></ul></li></ul><h2 id="Java-修饰符"><a href="#Java-修饰符" class="headerlink" title="Java 修饰符"></a>Java 修饰符</h2><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>记住一下表就完事了</p><table><thead><tr><th align="center">修饰符</th><th align="center">当前类</th><th align="center">同包</th><th align="center">子类</th><th align="center">其他包</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">default</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h3 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h3><ul><li>static(用来修饰变量、方法、类)<ul><li>修饰变量:变成静态变量其他的类、方法可以访问这个属性</li><li>修饰方法:静态方法在类加载的时候就存在了,它不依赖于任何实例</li><li>修饰语块:在类初始化一次</li><li>修饰类:静态内部类不依赖外部类,且不能访问外部类的非 static 变量和方法.</li></ul></li><li>final<ul><li>修饰变量:该变量不能不可改变(基本类型)</li><li>修饰方法:不能被继承类重新定义</li><li>修饰类:不能够被继承</li></ul></li><li>abstract<ul><li>用来创建抽象类和抽象方法.</li></ul></li><li>synchronized、volatile<ul><li>主要用于线程的编程.</li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>成员变量</li><li>局部变量</li><li>全局变量</li></ul><table><thead><tr><th align="center">\</th><th align="center">成员变量</th><th align="center">局部变量</th><th align="center">静态变量</th></tr></thead><tbody><tr><td align="center">定义位置</td><td align="center">在类中,方法外</td><td align="center">方法中,或者方法的形式参数</td><td align="center">在类中,方法外</td></tr><tr><td align="center">初始化值</td><td align="center">有默认初始化值</td><td align="center">无,先定义,后赋值才可以使用</td><td align="center">有默认初始化值</td></tr><tr><td align="center">调用方式</td><td align="center">对象调用</td><td align="center">—</td><td align="center">对象调用,类名调用</td></tr><tr><td align="center">储存位置</td><td align="center">堆中</td><td align="center">栈中</td><td align="center">方法区</td></tr><tr><td align="center">生命周期</td><td align="center">与对象共存亡</td><td align="center">与方法共存亡</td><td align="center">与类共存亡</td></tr><tr><td align="center">别名</td><td align="center">实例变量</td><td align="center">—</td><td align="center">类变量</td></tr></tbody></table><h2 id="Java面对对象"><a href="#Java面对对象" class="headerlink" title="Java面对对象"></a>Java面对对象</h2><p>Java面对对象具有三大特性:</p><ul><li>封装<br>-继承是从已有类得到继承信息创建新类的过程.提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）.继承让变化中的软件系统有了一定的延续性,同时继承也是封装程序中可变因素的</li><li>继承<br>-通常认为封装是把数据和操作数据的方法绑定起来,对数据的访问只能通过已定义的接口</li><li>多态<br>-多态是指允许不同子类型的对象对同一消息作出不同的响应.要实现多态主要是做两件事:重写和重载.</li></ul><h3 id="Overload-方法重载-和Override-方法重写"><a href="#Overload-方法重载-和Override-方法重写" class="headerlink" title="Overload(方法重载)和Override(方法重写)"></a>Overload(方法重载)和Override(方法重写)</h3><p>重载:是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p><p>重写:重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距上次学习Java基础已经过去2年多了,现在或多或少忘记了一些知识点,正好这次期末要考Java基础,在此重新把Java基础过一遍,查漏补缺,加深印象.&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>2019年自我总结</title>
    <link href="http://yoursite.com/2019/12/28/2019%E5%B9%B4%E8%87%AA%E6%88%91%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/12/28/2019年自我总结/</id>
    <published>2019-12-28T13:19:54.000Z</published>
    <updated>2019-12-28T15:09:50.589Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;</p><a id="more"></a><h1 id="自我总结"><a href="#自我总结" class="headerlink" title="自我总结"></a><p style="text-align:center"><font>自我总结<font></font></font></p></h1><p>&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; 2019年对于我来说是具有成长性的一年,这一年里面我收获许多,也绝望很多,但还是坚持下来了,而且对自己未来的道路十分的迷茫,我分别对这一年的时间内进行概述:<br>&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;1月的时候我还在深圳找工作,在各个平台上投了加起来将近7000多份简历,只收到了仅有的7次面试.我现在都还记得那种绝望,整个房间都空了,朋友们都去面试了,只有自己一个人坐在凳子上,投简历、准备面试题、准备自我介绍。在7次的面试中有4家是培训机构的子公司(达内),面试你这种刚出来的小白,就是一顿打击,然后让你他们的公司培训一下.还有一次是一个居民楼里面的公司自己感觉还行,但回来之前就没有信息了,还有一次我坐地铁2个小时,然后又走了半个小时,然后是一个骗子公司,啥技术都没问,就给你开8000,还说我们这最低8000.我傻了都,还有一次运维的工作要去外地现在维护就没去开的5000,最后一次是我工作的公司深圳市筷云有限公司,跟软通动力一个写字楼,实习5000,转正8000,考察期1个星期,一个外包公司.我进去的第一个星期双休变单休,……,由于这个是一个外包公司,人员变动的很快,基本上公司一直在招人,我一进来就一工作了1个月的哥们被项目大佬嫌太菜给踢了,我慌的一比,但还好项目很快就熟悉了下了,也慢慢的好起来了,然后过年回来我一哥们说要专升本,我还是头一次一听说专升本,了解了一下,打算试一试,所以辞去了深圳的工作,回家复习.<br>&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; 3月我开始了复习,一开始准备的是湖北师范大学,买了c语言、微机原理的资料,英语基础基本上是从音开始的(我是真的菜),然后就开开始疯狂学微机可以多拉点分,写了接近100份微机试卷,MD,招生简章出来了,说今年不考微机了,……,然后我就换了一个学校,荆楚理工.花了1个月的时间去重新学了计算机基础,到了6月考试,出的题目是真的简单(英语看不懂除外),然后就考上了,15名,之前就跟基友疯玩了2个月(现在想想就后悔浪费了这么多的时间),9月去上学.<br>&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; 9月来到学校,看了课表,MD,居然有CAD,我服了,一个计算机学院的开了一门机械的课程,我不喜欢这个课,就开始学自己想学的东西,之前用hexo搭了一个静态的博客,就一直没有管了,我就重新启动了这个博客,给它注册了个域名,开始写博客了,我写的博客是自己学习过程中的一些总结,才发现写博客是多快乐的一件事情,看着自己的文章一篇一篇变多了,心里就有一种满足感,这种满足比我打游戏还舒服,之后的几个月我基本上没有打几次游戏了,中途报了个软考程序员,也过了,题很简单.又去图书馆看了一下408的那几门课程,打算如果明年4级过了就去试一试考研.<br>&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; 回看我这即将过去的2019,觉得有几分可惜、有几分自信、几分迷茫,但过去的都过去了,目前只有把握现在,才能去追求远方和我等了很久的那个女孩,在此我给我在2020定一下几个目标:<br>1.坚持写博客,减一下肥<br>2.liunx一定要学好<br>3.javaWeb相关的知识学习,中间件,并发等<br>4.看源码<br>5.坚持背单词<br>6.3月的篮桥,4月的四级<br>7.LeetCode的题坚持刷</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 在最后引用美国往事里面的一句话:</p><blockquote><p>当我对世事厌倦的时候，我就会想到你。想到你在世界的某个地方生活着、存在着，我就愿意忍受一切。你的存在对我很重要。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python-入门篇9</title>
    <link href="http://yoursite.com/2019/12/27/Python-%E5%85%A5%E9%97%A8%E7%AF%879/"/>
    <id>http://yoursite.com/2019/12/27/Python-入门篇9/</id>
    <published>2019-12-27T08:44:38.000Z</published>
    <updated>2019-12-27T09:06:44.179Z</updated>
    
    <content type="html"><![CDATA[<p>这部分是关于多线程与多进程之间的知识,再次之前必须了解操作系统的相关知识,因为Python是在系统调用进行了封装.</p><a id="more"></a><p>在Linux中,创造新进程的方法只有一个，就是fork(),其他的函数库看似可以创建进程,其实内部调用了fork(),<br>普通的函数:调用一次,返回一次.<br>fork():调用的一个奇妙之处就是<font color="red">它仅仅被调用一次，却能够返回两次.</font><br>1.在父进程中，fork返回新创建子进程的进程ID；<br>2.在子进程中，fork返回0；<br>3.如果出现错误，fork返回一个负值；</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(os.getpid())</span><br><span class="line"><span class="hljs-comment">#子进程只需要调用getppid()就可以拿到父进程的ID。</span></span><br><span class="line">pid = os.fork()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分是关于多线程与多进程之间的知识,再次之前必须了解操作系统的相关知识,因为Python是在系统调用进行了封装.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-入门篇8</title>
    <link href="http://yoursite.com/2019/12/23/Python-%E5%85%A5%E9%97%A8%E7%AF%878/"/>
    <id>http://yoursite.com/2019/12/23/Python-入门篇8/</id>
    <published>2019-12-23T09:21:33.000Z</published>
    <updated>2019-12-27T08:06:28.545Z</updated>
    
    <content type="html"><![CDATA[<p>这一部分是关于IO操作</p><a id="more"></a><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><p>使用Python内部的函数open()</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">with</span> open(<span class="hljs-string">"C:/Users/1171676294/Desktop/新建文本文档 (2).txt"</span>,<span class="hljs-string">"r"</span>,encoding=<span class="hljs-string">'UTF-8'</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">print(f.read()) <span class="hljs-comment">#会一次性读取文件的全部内容</span></span><br><span class="line">    <span class="hljs-comment">#with语句来自动帮我们调用close()方法</span></span><br><span class="line">    <span class="hljs-comment">#f.close()</span></span><br></pre></td></tr></table></figure><p>1.read(size)方法，每次最多读取size个字节的内容。<br>2.readlines()一次读取所有内容并按行返回list。<br>rb,已二进制的形式读取文件</p><h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><p>使用Python内部的函数open()</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">with</span> open(<span class="hljs-string">"C:/Users/1171676294/Desktop/text.txt"</span>,<span class="hljs-string">"w"</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="line">f.write(<span class="hljs-string">"zlwzlwlzlw"</span>)</span><br><span class="line">    <span class="hljs-comment">#w 写命令 wb 已二进制写入文件</span></span><br><span class="line">    <span class="hljs-comment">#'a'以追加（append）模式写入。</span></span><br></pre></td></tr></table></figure><h2 id="读写内存"><a href="#读写内存" class="headerlink" title="读写内存"></a>读写内存</h2><p>1.写入字符串<br>2.读写二进制文件</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO</span><br><span class="line">f = StringIO()</span><br><span class="line">print(f.write(<span class="hljs-string">"zlwzlwzlw"</span>))</span><br><span class="line">print(f.getvalue())</span><br><span class="line"><span class="hljs-comment"># print(f.write(" "))</span></span><br><span class="line">print(f.readable())</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span>  BytesIO</span><br></pre></td></tr></table></figure><h2 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h2><p>Python内置的os模块也可以直接调用操作系统提供的接口函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-comment">#查看当前的操作系统</span></span><br><span class="line">print(os.name)</span><br><span class="line"><span class="hljs-comment">#查看当前目录的绝对路径</span></span><br><span class="line">print(os.path.abspath(<span class="hljs-string">"."</span>))</span><br><span class="line"><span class="hljs-comment">#在路径拼接</span></span><br><span class="line">print(os.path.join(<span class="hljs-string">"C:/Users/1171676294/Desktop/"</span>,<span class="hljs-string">"408"</span>))</span><br><span class="line"><span class="hljs-comment">#创建目录</span></span><br><span class="line">print(os.mkdir(<span class="hljs-string">"C:/Users/1171676294/Desktop/zlwzlw"</span>))</span><br><span class="line"><span class="hljs-comment">#删除目录</span></span><br><span class="line">os.rmdir(<span class="hljs-string">"C:/Users/1171676294/Desktop/zlwzlw"</span>)</span><br><span class="line"><span class="hljs-comment">#得到文件名</span></span><br><span class="line">print(os.path.split(<span class="hljs-string">"C:/Users/1171676294/Desktop/zlwzlw"</span>)[<span class="hljs-number">1</span>])</span><br><span class="line"><span class="hljs-comment">#得到文件扩展名</span></span><br><span class="line">print(os.path.splitext(<span class="hljs-string">"C:/Users/1171676294/Desktop/zlwzlw"</span>)[<span class="hljs-number">1</span>])</span><br><span class="line"><span class="hljs-comment">#对于当前目录下文件改名</span></span><br><span class="line">print(os.rename(<span class="hljs-string">"ZZZ.txt"</span>,<span class="hljs-string">"zlwzlwzlw.txt"</span>))</span><br><span class="line"><span class="hljs-comment">#删除文件</span></span><br><span class="line">os.remove(<span class="hljs-string">"zlwzlwzlw.txt"</span>)</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p><font color="red">变量从内存中变成可存储或传输的过程称之为序列化</font>，在Python中叫pickling，在其他语言中也被称之为serialization，</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">f = dict(name=<span class="hljs-string">"zlw"</span>,age=<span class="hljs-number">18</span>,score=<span class="hljs-number">90</span>)</span><br><span class="line">print(pickle.dumps(f))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一部分是关于IO操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-爬虫篇4</title>
    <link href="http://yoursite.com/2019/12/22/Python-%E7%88%AC%E8%99%AB%E7%AF%874/"/>
    <id>http://yoursite.com/2019/12/22/Python-爬虫篇4/</id>
    <published>2019-12-22T09:31:24.000Z</published>
    <updated>2019-12-22T10:07:44.434Z</updated>
    
    <content type="html"><![CDATA[<p>openpyxl模块,关于Excel的读写操作,常用的关于Excel的操作的模块如一下表格:</p><a id="more"></a><table><thead><tr><th>\</th><th align="center">XlsxWriter</th><th align="center">xlrd</th><th align="center">xlwt</th><th align="center">openpyxl</th></tr></thead><tbody><tr><td>介绍</td><td align="center">可以创建XLSX文件</td><td align="center">用来读取xls文件，是python-excel的三大模块</td><td align="center">用来写xls文件，是python-excal的三大模块</td><td align="center">可以读写XLSX、XLSM文件</td></tr><tr><td>读</td><td align="center">×</td><td align="center">√</td><td align="center">×</td><td align="center">√</td></tr><tr><td>写</td><td align="center">√</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td>.xls</td><td align="center">×</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td>.xlsx</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td>大文件</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr></tbody></table><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook</span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> load_workbook</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#实例化</span></span><br><span class="line">workbook = Workbook()</span><br><span class="line"><span class="hljs-comment">#激活 WorkSheet</span></span><br><span class="line">ws = workbook.active</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#打开已经存在的文件</span></span><br><span class="line"><span class="hljs-comment">#workbook2 = load_workbook("./zlwzlw.xlsx")</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#写的方式</span></span><br><span class="line"><span class="hljs-comment">#一.直接行号加列号写入</span></span><br><span class="line">ws[<span class="hljs-string">"A1"</span>] = <span class="hljs-number">123123</span></span><br><span class="line"><span class="hljs-comment">#二.可以附加行，从第一列开始附加(从最下方空白处，最左开始)(可以输入多行)</span></span><br><span class="line">ws.append([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#创建表 后面可以加参数,默认是插入到最后一位,如果为0,则插入在第一位</span></span><br><span class="line">zs = workbook.create_sheet(<span class="hljs-string">"zlwSheet"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#选择表</span></span><br><span class="line">ws = workbook[<span class="hljs-string">"zlwSheet"</span>]</span><br><span class="line">ws.append([<span class="hljs-string">"ZLW"</span>,<span class="hljs-string">"ZLWZLW"</span>])</span><br><span class="line">ws.append([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>])</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#查看表 一个数组</span></span><br><span class="line">print(workbook.sheetnames)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#访问单元格</span></span><br><span class="line"><span class="hljs-comment">#单一单元格访问</span></span><br><span class="line">s = ws[<span class="hljs-string">"A1"</span>]</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 保存文件</span></span><br><span class="line">workbook.save(<span class="hljs-string">"./zlwzlw.xlsx"</span>)</span><br></pre></td></tr></table></figure><h3 id="一个利用openpyxl模块将分页的数据保存在Excel中的例子"><a href="#一个利用openpyxl模块将分页的数据保存在Excel中的例子" class="headerlink" title="一个利用openpyxl模块将分页的数据保存在Excel中的例子"></a>一个利用openpyxl模块将分页的数据保存在Excel中的例子</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook</span><br><span class="line"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> load_workbook</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 请求页面</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getHtml</span><span class="hljs-params">(url)</span>:</span></span><br><span class="line">    <span class="hljs-comment"># 请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line">    req = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="hljs-keyword">if</span> req.status_code == <span class="hljs-number">200</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> req.text</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 解析数据</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">interpretData</span><span class="hljs-params">(html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="hljs-string">"lxml"</span>)  <span class="hljs-comment"># a</span></span><br><span class="line">    s = soup.find_all(<span class="hljs-string">"div"</span>, class_=<span class="hljs-string">"list-group-item list-group-item-action p-06"</span>)</span><br><span class="line">    data = []</span><br><span class="line">    i = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> s:</span><br><span class="line">        i += <span class="hljs-number">1</span></span><br><span class="line">        title = x.find(<span class="hljs-string">"div"</span>, class_=<span class="hljs-string">"topic_title"</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> title:</span><br><span class="line">            data1 = &#123;<span class="hljs-string">"title"</span>: title.text.split(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">0</span>], <span class="hljs-string">"href"</span>: x.a[<span class="hljs-string">"href"</span>], <span class="hljs-string">"author"</span>: x.strong.a.string,</span><br><span class="line">                     <span class="hljs-string">"date"</span>: x.p.span[<span class="hljs-string">"title"</span>]&#125;</span><br><span class="line">            data.append(data1)</span><br><span class="line">    <span class="hljs-keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 写入Excel</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">writer</span><span class="hljs-params">(data, num)</span>:</span></span><br><span class="line">    workbook2 = load_workbook(<span class="hljs-string">"./zlw.xlsx"</span>)</span><br><span class="line">    ws = workbook2.active</span><br><span class="line">    <span class="hljs-keyword">if</span> num == <span class="hljs-number">1</span>:</span><br><span class="line">        ws.append([U<span class="hljs-string">'标题'</span>, U<span class="hljs-string">'地址'</span>, U<span class="hljs-string">'作者'</span>, U<span class="hljs-string">'时间'</span>])</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(data) + <span class="hljs-number">1</span>):</span><br><span class="line">        data1 = [data[i - <span class="hljs-number">1</span>].get(<span class="hljs-string">"title"</span>), data[i - <span class="hljs-number">1</span>].get(<span class="hljs-string">"href"</span>), data[i - <span class="hljs-number">1</span>].get(<span class="hljs-string">"author"</span>), data[i - <span class="hljs-number">1</span>].get(<span class="hljs-string">"date"</span>)]</span><br><span class="line">        ws.append(data1)</span><br><span class="line">        i += <span class="hljs-number">1</span></span><br><span class="line">    workbook2.save(<span class="hljs-string">"./zlw.xlsx"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 主函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(num)</span>:</span></span><br><span class="line">    <span class="hljs-comment"># url拼之后分页请求</span></span><br><span class="line">    url = <span class="hljs-string">f"https://www.lmonkey.com/t?page=<span class="hljs-subst">&#123;num&#125;</span>"</span></span><br><span class="line">    <span class="hljs-comment"># 发送请求</span></span><br><span class="line">    html = getHtml(url)</span><br><span class="line">    <span class="hljs-comment"># 解析数据</span></span><br><span class="line">    data = interpretData(html)</span><br><span class="line">    <span class="hljs-comment"># 写入Excel</span></span><br><span class="line">    writer(data, num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):</span><br><span class="line">        print(<span class="hljs-string">f"我是第<span class="hljs-subst">&#123;x&#125;</span>页"</span>)</span><br><span class="line">        main(x)</span><br><span class="line">        <span class="hljs-comment"># 设置请求间隙给访问的服务器减少压力</span></span><br><span class="line">        time.sleep(<span class="hljs-number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;openpyxl模块,关于Excel的读写操作,常用的关于Excel的操作的模块如一下表格:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-爬虫篇3</title>
    <link href="http://yoursite.com/2019/12/18/Python-%E7%88%AC%E8%99%AB%E7%AF%873/"/>
    <id>http://yoursite.com/2019/12/18/Python-爬虫篇3/</id>
    <published>2019-12-18T13:54:07.000Z</published>
    <updated>2019-12-24T13:53:02.207Z</updated>
    
    <content type="html"><![CDATA[<p>Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup会帮你节省数小时甚至数天的工作时,以下是官方API👇:<br><a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#" target="_blank" rel="noopener">https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#</a></p><a id="more"></a><p>我们先根据HTML字符串练习一下bs4,字符串如下:</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">&lt;html&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;head&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;/head&gt; </span></span><br><span class="line"><span class="hljs-string">&lt;body&gt; </span></span><br><span class="line"><span class="hljs-string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were </span></span><br><span class="line"><span class="hljs-string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="hljs-string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt;and</span></span><br><span class="line"><span class="hljs-string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="hljs-string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 创建BeautifulSoup对象</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="hljs-string">"lxml"</span>)</span><br></pre></td></tr></table></figure><h3 id="一-使用Tag对象按照文档结构获取数据"><a href="#一-使用Tag对象按照文档结构获取数据" class="headerlink" title="一.使用Tag对象按照文档结构获取数据"></a>一.使用Tag对象按照文档结构获取数据</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">z = soup.title.string</span><br><span class="line">z = soup.title.name</span><br><span class="line"><span class="hljs-comment"># 默认获取第一个p</span></span><br><span class="line">z = soup.p.string</span><br><span class="line"><span class="hljs-comment"># 获取p里面的class属性</span></span><br><span class="line">z = soup.p[<span class="hljs-string">'class'</span>]</span><br><span class="line"><span class="hljs-comment"># 获取p标签的父类的姓名</span></span><br><span class="line">z = soup.p.parent.name</span><br><span class="line">print(z)</span><br></pre></td></tr></table></figure><h3 id="二-搜索"><a href="#二-搜索" class="headerlink" title="二.搜索"></a>二.搜索</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 查询满足条件的一个元素</span></span><br><span class="line">f = soup.find(id=<span class="hljs-string">"link3"</span>)[<span class="hljs-string">"class"</span>]</span><br><span class="line">f = soup.find(id=<span class="hljs-string">"link3"</span>).string</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 查询满足条件的所有元素</span></span><br><span class="line">f = soup.find_all(<span class="hljs-string">"a"</span>)  <span class="hljs-comment"># 总返回一个列表,如果没有找到则返回空</span></span><br><span class="line"><span class="hljs-comment"># 属性参数attributes：可以传一个用Python字典封装起来的某个标签的若干个属性及与其对应的属性值做属性参数attributes。</span></span><br><span class="line"><span class="hljs-comment"># f = soup.findAll("",&#123;"class":&#123;"story","title"&#125;&#125;)</span></span><br><span class="line"><span class="hljs-comment"># 文本参数text:用标签的文本内容去匹配，而不是用标签的属性去匹配。</span></span><br><span class="line">f = soup.findAll(<span class="hljs-string">""</span>, text=<span class="hljs-string">"Tillie"</span>)</span><br><span class="line">f = soup.findAll(<span class="hljs-string">""</span>, id=<span class="hljs-string">"link2"</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> f:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><h3 id="三-css选择器"><a href="#三-css选择器" class="headerlink" title="三.css选择器"></a>三.css选择器</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">z = soup.select(<span class="hljs-string">"a"</span>)        <span class="hljs-comment"># 通过标签名字 #list</span></span><br><span class="line">z = soup.select(<span class="hljs-string">".sister"</span>)  <span class="hljs-comment"># 通过class选择器</span></span><br><span class="line">z = soup.select(<span class="hljs-string">"#link1 #link2 #link3"</span>)  <span class="hljs-comment"># 通id选择器</span></span><br><span class="line">z = soup.select(<span class="hljs-string">"p &gt; #link1"</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> z:</span><br><span class="line">    print(x.string)</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> requests,json</span><br><span class="line"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># url</span></span><br><span class="line">url = <span class="hljs-string">"https://www.lmonkey.com/t"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req = requests.get(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># if req.status_code == 200:</span></span><br><span class="line"><span class="hljs-comment">#     with open(r"./yqpy.html", "w", encoding='UTF-8') as fp:</span></span><br><span class="line"><span class="hljs-comment">#         fp.write(req.text)</span></span><br><span class="line"><span class="hljs-comment"># a = open("./yqpy.html","r",encoding="utf-8").read()</span></span><br><span class="line"><span class="hljs-comment"># 解析数据</span></span><br><span class="line">soup = BeautifulSoup(req.text, <span class="hljs-string">"lxml"</span>)  <span class="hljs-comment"># a</span></span><br><span class="line">s = soup.find_all(<span class="hljs-string">"div"</span>, class_=<span class="hljs-string">"list-group-item list-group-item-action p-06"</span>)</span><br><span class="line">i = <span class="hljs-number">0</span></span><br><span class="line">data = []</span><br><span class="line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> s:</span><br><span class="line">    i += <span class="hljs-number">1</span></span><br><span class="line">    title = x.find(<span class="hljs-string">"div"</span>, class_=<span class="hljs-string">"topic_title"</span>)</span><br><span class="line">    <span class="hljs-keyword">if</span> title:</span><br><span class="line">        <span class="hljs-comment"># print(title.text.split("\n")[0])</span></span><br><span class="line">        <span class="hljs-comment"># print(x.a["href"])</span></span><br><span class="line">        <span class="hljs-comment"># print(x.strong.a.string)</span></span><br><span class="line">        <span class="hljs-comment"># print(x.p.span["title"])</span></span><br><span class="line">        data1 = &#123;<span class="hljs-string">"title"</span>: title.text.split(<span class="hljs-string">"\n"</span>)[<span class="hljs-number">0</span>], <span class="hljs-string">"href"</span>: x.a[<span class="hljs-string">"href"</span>], <span class="hljs-string">"author"</span>: x.strong.a.string,</span><br><span class="line">                 <span class="hljs-string">"date"</span>: x.p.span[<span class="hljs-string">"title"</span>]&#125;</span><br><span class="line">        data.append(data1)</span><br><span class="line"></span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">with</span> open(<span class="hljs-string">"./yqpy.josn"</span>, <span class="hljs-string">"w"</span>) <span class="hljs-keyword">as</span> fp:</span><br><span class="line">    json.dump(data,fp)</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> re</span><br><span class="line"></span><br><span class="line">var = <span class="hljs-string">"wqerqwcasqweqwe123123qweqweqweqwef3ert"</span></span><br><span class="line"></span><br><span class="line">zlw = <span class="hljs-string">"\d"</span></span><br><span class="line"><span class="hljs-comment"># (匹配规则,字符串),返回list</span></span><br><span class="line">z = re.findall(zlw, var)</span><br><span class="line"><span class="hljs-comment"># (匹配规则,字符串),返回iterator</span></span><br><span class="line"><span class="hljs-comment"># s = re.finditer(zlw,var)</span></span><br><span class="line"><span class="hljs-comment"># for x in s:</span></span><br><span class="line"><span class="hljs-comment">#     print(x.group(),x.span())</span></span><br><span class="line"><span class="hljs-comment">#搜索,在替换</span></span><br><span class="line"><span class="hljs-comment"># zzz = re.sub("\d","ZLWZLW",var)</span></span><br><span class="line"><span class="hljs-comment"># print(zzz)</span></span><br><span class="line"><span class="hljs-comment"># print(z)</span></span><br><span class="line"><span class="hljs-comment">#将正则表达式的样式编译为一个 正则表达式对象 （正则对象），可以用于匹配，通过这个对象的方法 match(), search() 以及其他如下描述。</span></span><br><span class="line">z = re.compile(<span class="hljs-string">"123"</span>)</span><br><span class="line">s = z.findall(var)</span><br><span class="line">print(s)</span><br><span class="line"><span class="hljs-comment"># print(s.group(1))</span></span><br><span class="line"><span class="hljs-comment"># 正则对象</span></span><br><span class="line"><span class="hljs-comment"># 搜索整个string寻找第一个匹配的位置,返回一个匹配对象,如果没有匹配就返回None</span></span><br><span class="line"><span class="hljs-comment"># (String,开始的位置索引,默认值是0)</span></span><br><span class="line">z = re.search(<span class="hljs-string">"qer"</span>, var)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 如果String的开始位置能够找到这个正则样式的任意个匹配,返回一个匹配对象,如果没有匹配就返回None</span></span><br><span class="line">s = re.match(<span class="hljs-string">"wqer"</span>, var)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># rearch()                      跟               match() 区别</span></span><br><span class="line"><span class="hljs-string">'''     </span></span><br><span class="line"><span class="hljs-string">+从字符串开始到结尾进行搜索匹配                   +要么开始位置符合,否则不符合</span></span><br><span class="line"><span class="hljs-string">+匹配成功返回Match对象,否则None                  +匹配成功返回Match对象,否则None </span></span><br><span class="line"><span class="hljs-string">+group()返回元素                                +group()返回元素</span></span><br><span class="line"><span class="hljs-string">+span()返回下标区间                              +span()返回下标区间</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"></span><br><span class="line">print(z.group())</span><br><span class="line">print(s.group())</span><br></pre></td></tr></table></figure><h2 id="用re模块爬虫的例子"><a href="#用re模块爬虫的例子" class="headerlink" title="用re模块爬虫的例子"></a>用re模块爬虫的例子</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> re,requests</span><br><span class="line"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook</span><br><span class="line"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> load_workbook</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 写入Excel</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">writer</span><span class="hljs-params">(data)</span>:</span></span><br><span class="line">    workbook2 = load_workbook(<span class="hljs-string">"./zlw123123.xlsx"</span>)</span><br><span class="line">    ws = workbook2.active</span><br><span class="line">    ws.append([U<span class="hljs-string">'标题'</span>, U<span class="hljs-string">'作者'</span>, U<span class="hljs-string">'时间'</span>, U<span class="hljs-string">'地址'</span>])</span><br><span class="line">    print(data)</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(data)):</span><br><span class="line">        data1 = [data[i][<span class="hljs-number">0</span>],data[i][<span class="hljs-number">1</span>],data[i][<span class="hljs-number">2</span>],data[i][<span class="hljs-number">3</span>]]</span><br><span class="line">        print(data1)</span><br><span class="line">        ws.append(data1)</span><br><span class="line">        i += <span class="hljs-number">1</span></span><br><span class="line">    workbook2.save(<span class="hljs-string">"./zlw123123.xlsx"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#url</span></span><br><span class="line">url = <span class="hljs-string">"https://www.lmonkey.com/ask"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req = requests.get(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line">print(req.status_code)</span><br><span class="line"><span class="hljs-keyword">if</span> req.status_code == <span class="hljs-number">200</span>:</span><br><span class="line">    str1 = <span class="hljs-string">'&lt;div class="topic_title mb-0 lh-180 ml-n2"&gt;(.*?)&lt;small'</span></span><br><span class="line">    title = re.findall(str1, req.text)</span><br><span class="line">    str1 = <span class="hljs-string">'&lt;strong&gt;(.*?)&lt;/strong&gt;'</span></span><br><span class="line">    aouther = re.findall(str1,req.text)</span><br><span class="line">    str1 = <span class="hljs-string">'&lt;span data-toggle="tooltip" data-placement="top" title="(.*?)"&gt;'</span></span><br><span class="line">    date = re.findall(str1, req.text)</span><br><span class="line">    str1 = <span class="hljs-string">'&lt;a href="(https://www.lmonkey.com/ask/\d+)" target="_blank"&gt;'</span></span><br><span class="line">    url1 = re.findall(str1, req.text)</span><br><span class="line">    arrayList = list(zip(title,aouther,date,url1))</span><br><span class="line">    print(arrayList[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],len(arrayList))</span><br><span class="line">    writer(arrayList)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup会帮你节省数小时甚至数天的工作时,以下是官方API👇:&lt;br&gt;&lt;a href=&quot;https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-爬虫篇2</title>
    <link href="http://yoursite.com/2019/12/17/Python-%E7%88%AC%E8%99%AB%E7%AF%872/"/>
    <id>http://yoursite.com/2019/12/17/Python-爬虫篇2/</id>
    <published>2019-12-17T10:49:43.000Z</published>
    <updated>2019-12-17T12:35:15.300Z</updated>
    
    <content type="html"><![CDATA[<p>我们现在考虑跟复杂的情况,网站会检查登录状态,才允许用户访问一些特定的网页,比如说：你想进入个人信息页面,那么你没有登录,怎么会有个人信息<br>,然后你输入账户密码或者浏览器会检查你之前是否有记住密码然后直接登录(因为http协议无法保证状态)</p><a id="more"></a><table><thead><tr><th align="center">请求方式</th><th align="center">Cookie</th><th align="center">Session</th></tr></thead><tbody><tr><td align="center">存放位置</td><td align="center">浏览器端</td><td align="center">服务器端</td></tr><tr><td align="center">安全性</td><td align="center">低</td><td align="center">高</td></tr><tr><td align="center">存储限制</td><td align="center">4KB(不同浏览器不一样)</td><td align="center">无限制</td></tr><tr><td align="center">还有更多的网上查.</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>我以<a href="http://www.zmz2019.com" target="_blank" rel="noopener">http://www.zmz2019.com</a>这个网址作为例子(相比较简单)来梳理一下登录的步骤:<br>1.因为现在大多数网站的登录都是ajax做的,在登录页面F12进入开发者模式,选项卡现在Network模块.<br>2.网站用户名,密码随便输入,之前Network里面的Name列表发生改变,寻找登录那给请求如图下:<br><img src="/images/1.png" alt><br>3.复制该请求的地址,把form Data里面的选项写成字典(Map)<br>4.post请求<br>5.get请求</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 登录请求</span></span><br><span class="line">url = <span class="hljs-string">"http://www.zmz2019.com/User/Login/ajaxLogin"</span></span><br><span class="line"><span class="hljs-comment"># 个人信息</span></span><br><span class="line">url1 = <span class="hljs-string">"http://www.zmz2019.com/User/user"</span></span><br><span class="line"><span class="hljs-comment">#requests库的session对象能够帮我们跨请求保持某些参数，也会在同一个session实例发出的所有请求之间保持cookies。</span></span><br><span class="line"><span class="hljs-comment">#创建一个session对象</span></span><br><span class="line">req = requests.session()</span><br><span class="line"><span class="hljs-comment">#form data 列表参数</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-string">"account"</span>: <span class="hljs-string">"985686843@qq.com"</span>,</span><br><span class="line">    <span class="hljs-string">"password"</span>: <span class="hljs-string">"WEIwei1998"</span>,</span><br><span class="line">    <span class="hljs-string">"remember"</span>: <span class="hljs-string">"1"</span>,</span><br><span class="line">    <span class="hljs-string">"url_back"</span>: <span class="hljs-string">"http://www.zmz2019.com/User/user"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req1 = req.post(url=url, headers=headers, data=data)</span><br><span class="line">req1.encoding = <span class="hljs-string">"utf-8"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> req1.status_code == <span class="hljs-number">200</span>:</span><br><span class="line">    req2 = req.get(url=url1, headers=headers)</span><br><span class="line">    <span class="hljs-comment"># req2.encoding = "utf-8"</span></span><br><span class="line">    <span class="hljs-keyword">with</span> open(<span class="hljs-string">r"./rr.html"</span>, <span class="hljs-string">"w"</span>, encoding=<span class="hljs-string">'UTF-8'</span>) <span class="hljs-keyword">as</span> fp:</span><br><span class="line">        fp.write(req2.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Xpath解析数据"><a href="#Xpath解析数据" class="headerlink" title="Xpath解析数据"></a>Xpath解析数据</h2><p>XPath 是一门在 XML 文档中查找信息的语言。XPath 可用来在 XML 文档中对元素和属性进行遍历。<br>详细的教程点击👇链接:<br><a href="https://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/xpath/index.asp</a><br>etree解析HTML的两种方式:<br>1.读取一个html字符串解析<br>2.读取一个html文件解析</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">txt = <span class="hljs-string">'''</span></span><br><span class="line"><span class="hljs-string">&lt;html&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;head&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;link href="http://js.jstucdn.com/style/layout.css" rel="stylesheet" type="text/css" /&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;link href="http://js.jstucdn.com/style/user.css" rel="stylesheet" type="text/css" /&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;script src="http://js.jstucdn.com/js/jquery-1.7.1.min.js" charset="utf-8"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;script src="http://js.jstucdn.com/js/global.js?v=20160922" charset="utf-8"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;title&gt;我的首页&lt;/title&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;meta name="keywords" content="我的首页"&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;meta name="description" content="我的首页"&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;/head&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;body&gt;</span></span><br><span class="line"><span class="hljs-string"> &lt;div class="menu-box"&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;ul class="w"&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;li&gt;&lt;a href="/" class="w_index"&gt;首页&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;li channel="translate"&gt;&lt;a href="/translate"&gt;翻译任务&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;li channel="article"&gt;&lt;a href="/article"&gt;资讯&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;li channel="subtitle"&gt;&lt;a href="/subtitle"&gt;字幕&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;li channel="resource"&gt;&lt;a href="/resourcelist"&gt;影视库&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;li channel='top'&gt;&lt;a href="/html/top/week.html"&gt;排行榜&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;li channel="today"&gt;&lt;a href="/today"&gt;今日&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;li channel='schedule'&gt;&lt;a href="/tv/schedule"&gt;播出表&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;li channel="help"&gt;&lt;a href="/help"&gt;求档&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;li&gt;&lt;a href="/Announcement"&gt;公告&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;li&gt;&lt;a href="http://allyingshi.com/fanyi/index.html"&gt;合作洽谈&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;/body&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;/html&gt;</span></span><br><span class="line"><span class="hljs-string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text=txt)</span><br><span class="line">print(html)</span><br><span class="line">print(html.xpath(<span class="hljs-string">"/html/body/div/ul/li/a/text()"</span>))</span><br><span class="line"><span class="hljs-comment">#在xpath中下标重1开始</span></span><br><span class="line">print(html.xpath(<span class="hljs-string">"/html/body/div/ul/li[1]/a/text()"</span>))</span><br><span class="line"></span><br><span class="line">html1 = etree.parse(<span class="hljs-string">"./rr.html"</span>,etree.HTMLParser())</span><br><span class="line">print(html1.xpath(<span class="hljs-string">"/html/body/div/div/ul/li/a/text()"</span>))</span><br><span class="line">h = html1.xpath(<span class="hljs-string">'//div[@class="menu-box"]//li/a/text()'</span>)</span><br><span class="line">print(html1.xpath(<span class="hljs-string">'//div[@class="menu-box"]//li/a/text()'</span>))</span><br><span class="line">h1 = html1.xpath(<span class="hljs-string">'//div[@class="menu-box"]//li/a/@href'</span>)</span><br><span class="line">print(html1.xpath(<span class="hljs-string">'//div[@class="menu-box"]//li/a/@href'</span>))</span><br><span class="line"></span><br><span class="line">res = list(zip(h,h1))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree</span><br><span class="line"><span class="hljs-keyword">import</span> requests,json</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    url = <span class="hljs-string">"https://www.lmonkey.com/essence"</span></span><br><span class="line">    <span class="hljs-comment"># 请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = []</span><br><span class="line">    <span class="hljs-comment">#初始化</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        req = requests.get(url=self.url,headers=self.headers)</span><br><span class="line">        print(req.status_code)</span><br><span class="line">        <span class="hljs-keyword">if</span> req.status_code==<span class="hljs-number">200</span>:</span><br><span class="line">            <span class="hljs-keyword">with</span> open(<span class="hljs-string">r"./test1.html"</span>,<span class="hljs-string">"w"</span>,encoding=<span class="hljs-string">'UTF-8'</span>) <span class="hljs-keyword">as</span> fp:</span><br><span class="line">                fp.write(req.text)</span><br><span class="line">            <span class="hljs-keyword">if</span> self.getHtml():</span><br><span class="line">                self.writeJson()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#解析网页</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getHtml</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        html = etree.parse(<span class="hljs-string">"./test1.html"</span>,etree.HTMLParser())</span><br><span class="line">        authours = html.xpath(<span class="hljs-string">'//div[contains(@class,"list-group-item list-group-item-action")]//strong/a/text()'</span>)</span><br><span class="line">        title = html.xpath(<span class="hljs-string">'//div[contains(@class,"list-group-item list-group-item-action")]//div[contains(@class,"flex-fill  col-12")]/a[1]/div/text()'</span>)</span><br><span class="line">        link = html.xpath(<span class="hljs-string">'//div[contains(@class,"list-group-item list-group-item-action")]//div[contains(@class,"flex-fill  col-12")]/a[1]/@href'</span>)</span><br><span class="line">        <span class="hljs-comment">#zip 方法在 Python 2 和 Python 3 中的不同：在 Python 3.x 中为了减少内存，zip() 返回的是一个对象。如需展示列表，需手动 list() 转换。</span></span><br><span class="line">        <span class="hljs-comment">#数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</span></span><br><span class="line">        <span class="hljs-comment">#如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。</span></span><br><span class="line">        <span class="hljs-comment">#res = list(zip(authours,title,link))</span></span><br><span class="line">        <span class="hljs-comment">#print(res)</span></span><br><span class="line">        <span class="hljs-comment"># print("--------")</span></span><br><span class="line">        <span class="hljs-comment"># print(len(authours))</span></span><br><span class="line">        <span class="hljs-comment"># print(len(title))</span></span><br><span class="line">        <span class="hljs-comment"># print(len(link))</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(authours)):</span><br><span class="line">            res = &#123;<span class="hljs-string">'authours'</span>:authours[i],<span class="hljs-string">'title'</span>:title[i],<span class="hljs-string">'link'</span>:link[i]&#125;</span><br><span class="line">            self.data.append(res)</span><br><span class="line">        <span class="hljs-keyword">return</span>  <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#写入文件</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">writeJson</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">with</span> open(<span class="hljs-string">"./rr.json"</span>,<span class="hljs-string">"w"</span>) <span class="hljs-keyword">as</span> fp:</span><br><span class="line">            json.dump(self.data,fp)</span><br><span class="line"></span><br><span class="line">Test()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们现在考虑跟复杂的情况,网站会检查登录状态,才允许用户访问一些特定的网页,比如说：你想进入个人信息页面,那么你没有登录,怎么会有个人信息&lt;br&gt;,然后你输入账户密码或者浏览器会检查你之前是否有记住密码然后直接登录(因为http协议无法保证状态)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-爬虫篇1</title>
    <link href="http://yoursite.com/2019/12/16/Python-%E7%88%AC%E8%99%AB%E7%AF%871/"/>
    <id>http://yoursite.com/2019/12/16/Python-爬虫篇1/</id>
    <published>2019-12-16T07:11:33.000Z</published>
    <updated>2019-12-16T08:12:51.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络爬虫-又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者"><a href="#网络爬虫-又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者" class="headerlink" title="网络爬虫(又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者)"></a>网络爬虫(又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者)</h2><p>是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。<br>其实通俗的讲就是通过程序去获取web页面上自己想要的数据，也就是自动抓取数据</p><a id="more"></a><h3 id="爬虫流程步骤"><a href="#爬虫流程步骤" class="headerlink" title="爬虫流程步骤"></a>爬虫流程步骤</h3><p>1.确定需求<br>2.寻找需求<br>3.发送请求<br>4.解析数据<br>5.储存数据</p><h3 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h3><p>因为我是安装的Anaconda3,里面已经有了requests,就不需要在去安装了,在之前流程之中,我以发送请求开始写,说到请求,那要回顾一下http最常用的两种请求方式:</p><table><thead><tr><th align="center">请求方式</th><th align="center">get</th><th align="center">post</th></tr></thead><tbody><tr><td align="center">参数位置</td><td align="center">url中</td><td align="center">request body</td></tr><tr><td align="center">参数长度</td><td align="center">有限制</td><td align="center">无限制</td></tr><tr><td align="center">参数编码</td><td align="center">ASCII编码</td><td align="center">无限制</td></tr><tr><td align="center">后退/刷新</td><td align="center">不重复提交，回退无害</td><td align="center">重复提交，回退有害</td></tr><tr><td align="center">安全性</td><td align="center">参数暴露，不安全</td><td align="center">安全</td></tr><tr><td align="center">缓存</td><td align="center">可以缓存</td><td align="center">不可以缓存</td></tr><tr><td align="center">书签</td><td align="center">可以收藏为书签</td><td align="center">不可收藏为书签</td></tr><tr><td align="center">历史</td><td align="center">参数保留在浏览器历史</td><td align="center">不保留在浏览器历史</td></tr><tr><td align="center">请求包个数</td><td align="center">1个 http header+data</td><td align="center">两个 先http header，再data</td></tr></tbody></table><h3 id="get-请求的例子"><a href="#get-请求的例子" class="headerlink" title="get()请求的例子"></a>get()请求的例子</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#导入模块</span></span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#定义请求头信息 有些网站会拒绝Python程序,需要自己定义请求头,伪装信息,以下有个个不同的浏览器的User-Agent</span></span><br><span class="line"><span class="hljs-comment">#https://www.cnblogs.com/zrmw/p/9332801.html</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#发请求</span></span><br><span class="line"><span class="hljs-comment">#url = "https://www.baidu.com/"</span></span><br><span class="line">url = <span class="hljs-string">"https://www.xicidaili.com/"</span></span><br><span class="line"></span><br><span class="line">req = requests.get(url,headers=headers)</span><br><span class="line">req.encoding=<span class="hljs-string">"utf-8"</span>                    <span class="hljs-comment">#如果不设置编码的话,text中的中文字符是乱码</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#获得请求</span></span><br><span class="line">print(req)                              <span class="hljs-comment">#一个Response对象 &lt;Response [200]&gt; 里面有很多信息</span></span><br><span class="line">print(req.status_code)                  <span class="hljs-comment">#请求状态码</span></span><br><span class="line">print(req.url)                          <span class="hljs-comment">#请求路径</span></span><br><span class="line">print(req.text)                         <span class="hljs-comment">#获得的响应内容</span></span><br><span class="line">print(req.content.decode(<span class="hljs-string">"utf-8"</span>))      <span class="hljs-comment">#二进制文本流,转化成utf-8的字符串(content返回的是bytes型的数据)</span></span><br><span class="line">print(req.headers)                      <span class="hljs-comment">#响应头文件</span></span><br><span class="line">print(req.request.headers)              <span class="hljs-comment">#请求头文件</span></span><br><span class="line">print(req.encoding)                     <span class="hljs-comment">#Response对象的编码(Requests库的自身编码为: r.encoding = ‘ISO-8859-1’ )</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 请求状态码为 200 就写入到本地目录下的test1.html中</span></span><br><span class="line"><span class="hljs-keyword">if</span> req.status_code==<span class="hljs-number">200</span>:</span><br><span class="line">    <span class="hljs-keyword">with</span> open(<span class="hljs-string">r"./test1.html"</span>,<span class="hljs-string">"w"</span>,encoding=<span class="hljs-string">'UTF-8'</span>) <span class="hljs-keyword">as</span> fp:</span><br><span class="line">        fp.write(req.text)</span><br></pre></td></tr></table></figure><h3 id="post-请求的例子"><a href="#post-请求的例子" class="headerlink" title="post()请求的例子"></a>post()请求的例子</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="hljs-string">"https://fanyi.baidu.com/sug"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="hljs-string">'kw'</span>:<span class="hljs-string">'删除'</span>&#125;</span><br><span class="line"></span><br><span class="line">req = requests.post(url=url,headers=headers,data=data)</span><br><span class="line"><span class="hljs-comment">#req.encoding = "utf-8"</span></span><br><span class="line"></span><br><span class="line">print(req.status_code)</span><br><span class="line">print(req.text)</span><br><span class="line">print(req.json())</span><br><span class="line"><span class="hljs-keyword">if</span> req.status_code == <span class="hljs-number">200</span>:</span><br><span class="line">    print(<span class="hljs-string">"请求成功！"</span>)</span><br><span class="line">    data = req.json()</span><br><span class="line">    <span class="hljs-keyword">if</span> data[<span class="hljs-string">"errno"</span>] == <span class="hljs-number">0</span>:</span><br><span class="line">        print(<span class="hljs-string">"数据无异常"</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> data[<span class="hljs-string">"data"</span>] == []:</span><br><span class="line">            print(<span class="hljs-string">"有问题"</span>)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            print(data[<span class="hljs-string">"data"</span>][<span class="hljs-number">0</span>][<span class="hljs-string">"k"</span>])</span><br><span class="line">            print(data[<span class="hljs-string">"data"</span>][<span class="hljs-number">0</span>][<span class="hljs-string">"v"</span>].split(<span class="hljs-string">";"</span>)[<span class="hljs-number">-2</span>].replace(<span class="hljs-string">" "</span>, <span class="hljs-string">""</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;网络爬虫-又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者&quot;&gt;&lt;a href=&quot;#网络爬虫-又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者&quot; class=&quot;headerlink&quot; title=&quot;网络爬虫(又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者)&quot;&gt;&lt;/a&gt;网络爬虫(又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者)&lt;/h2&gt;&lt;p&gt;是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。&lt;br&gt;其实通俗的讲就是通过程序去获取web页面上自己想要的数据，也就是自动抓取数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-入门篇7</title>
    <link href="http://yoursite.com/2019/12/15/Python-%E5%85%A5%E9%97%A8%E7%AF%877/"/>
    <id>http://yoursite.com/2019/12/15/Python-入门篇7/</id>
    <published>2019-12-15T11:59:01.000Z</published>
    <updated>2019-12-15T12:09:39.278Z</updated>
    
    <content type="html"><![CDATA[<p>这一部分主要是关于Python的错误、调试很测试,内容偏少</p><a id="more"></a><p>try:…except…finally…</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    print(<span class="hljs-string">"try..."</span>)</span><br><span class="line">    a = <span class="hljs-number">10</span> / int(<span class="hljs-string">"A"</span>)  <span class="hljs-comment"># int("A")  0</span></span><br><span class="line">    print(<span class="hljs-string">"value="</span>,a)</span><br><span class="line"><span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e1:</span><br><span class="line">    print(<span class="hljs-string">"except1..."</span>)</span><br><span class="line">    print(<span class="hljs-string">"error="</span>,e1)</span><br><span class="line"><span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e2:</span><br><span class="line">    print(<span class="hljs-string">"except2..."</span>)</span><br><span class="line">    print(<span class="hljs-string">"error="</span>,e2)</span><br><span class="line"><span class="hljs-keyword">else</span>:</span><br><span class="line">    print(<span class="hljs-string">"no error!"</span>)</span><br><span class="line"><span class="hljs-keyword">finally</span>:</span><br><span class="line">    print(<span class="hljs-string">"finally..."</span>)</span><br><span class="line"><span class="hljs-comment">#Python的错误是class,所有的错误类型都继承自BaseException,它不但捕获该类型的错误,还把其子类也“一网打尽”.</span></span><br><span class="line"><span class="hljs-comment">#https://docs.python.org/3/library/exceptions.html#exception-hierarchy</span></span><br><span class="line">print(<span class="hljs-string">"-------------"</span>)</span><br><span class="line"><span class="hljs-comment">#好处之一就是可以跨越多层调用,</span></span><br><span class="line"><span class="hljs-comment"># 比如函数main()调用f1(),f1()调用f2(),结果f2()出错了,这时,只要main()捕获到了,就可以层层向下查出问题</span></span><br><span class="line"><span class="hljs-keyword">import</span> logging</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f2</span><span class="hljs-params">(s)</span>:</span></span><br><span class="line">   <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / int(s)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f1</span><span class="hljs-params">(s)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> f2(s) * <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">try</span>:</span><br><span class="line">        f1(<span class="hljs-string">"a"</span>)</span><br><span class="line">    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line">        print(<span class="hljs-string">"error="</span>,e)</span><br><span class="line">    <span class="hljs-keyword">finally</span>:</span><br><span class="line">        print(<span class="hljs-string">"finally"</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><p>出错的时候,一定要分析错误的调用栈信息,才能定位错误的位置.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main1</span><span class="hljs-params">()</span>:</span></span><br><span class="line">   f1(<span class="hljs-string">"a"</span>)</span><br><span class="line"></span><br><span class="line">main1()</span><br><span class="line"><span class="hljs-comment">#Traceback (most recent call last): 告诉我们这是错误的跟踪信息.</span></span><br><span class="line"><span class="hljs-comment"># File "D:/PythonWork/HelloPython/errorTest.py", line 40, in &lt;module&gt;</span></span><br><span class="line"><span class="hljs-comment">#    main1()</span></span><br><span class="line"><span class="hljs-comment">#  File "D:/PythonWork/HelloPython/errorTest.py", line 38, in main1</span></span><br><span class="line"><span class="hljs-comment">#    f1("a")</span></span><br><span class="line"><span class="hljs-comment">#  File "D:/PythonWork/HelloPython/errorTest.py", line 24, in f1</span></span><br><span class="line"><span class="hljs-comment">#    return f2(s) * 2</span></span><br><span class="line"><span class="hljs-comment">#  File "D:/PythonWork/HelloPython/errorTest.py", line 21, in f2</span></span><br><span class="line"><span class="hljs-comment">#    return 10 / int(s)</span></span><br><span class="line"><span class="hljs-comment">#ValueError: invalid literal for int() with base 10: 'a'</span></span><br></pre></td></tr></table></figure><h3 id="记录错误"><a href="#记录错误" class="headerlink" title="记录错误"></a>记录错误</h3><p>因为出现了错误程序停止了下了,我们把错误信息打印之后输出,同时让程序继续执行<br>Python内置的logging模块可以非常容易地记录错误信息</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main()</span><br><span class="line">print(<span class="hljs-string">"没想到吧！,我还在执行"</span>)</span><br></pre></td></tr></table></figure><h3 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h3><p>如果要抛出错误,首先根据需要,可以定义一个错误的class,选择好继承关系,然后,用raise语句抛出一个错误的实例</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">F1Error</span><span class="hljs-params">(ZeroDivisionError)</span>:</span></span><br><span class="line">    logging.exception(ZeroDivisionError)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f1</span><span class="hljs-params">(i)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> i==<span class="hljs-number">0</span>:</span><br><span class="line">        <span class="hljs-keyword">raise</span> F1Error(<span class="hljs-string">"this is value=%s"</span> %i)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> /i</span><br><span class="line"><span class="hljs-comment">#print(f1(0))</span></span><br></pre></td></tr></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>1.用print()打印可能出现错误的地方,进而进行分析<br>2.凡是用print()来辅助查看的地方,都可以用断言（assert）来替代<br>启动Python解释器时可以用-O参数来关闭assert,关闭后,你可以把所有的assert语句当成pass来看.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f3</span><span class="hljs-params">(i)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">assert</span> i != <span class="hljs-number">0</span>,<span class="hljs-string">"this is zero!!"</span> <span class="hljs-comment">#为true继续往下执行  AssertionError: this is zero!!</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> /i</span><br><span class="line">print(f3(<span class="hljs-number">0</span>))</span><br></pre></td></tr></table></figure><p>3.logging<br>把print()替换为logging是第3种方式,和assert比,logging不会抛出错误,而且可以输出到文件：<br>print(“——-“)</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f4</span><span class="hljs-params">(i)</span>:</span></span><br><span class="line">    logging.info(<span class="hljs-string">"n = %d"</span> % i)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / i</span><br><span class="line">f4(<span class="hljs-number">0</span>)</span><br></pre></td></tr></table></figure><p>4.pdb省略</p><p>5.IDE打断点(最实用的)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一部分主要是关于Python的错误、调试很测试,内容偏少&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-入门篇6</title>
    <link href="http://yoursite.com/2019/12/15/Python-%E5%85%A5%E9%97%A8%E7%AF%876/"/>
    <id>http://yoursite.com/2019/12/15/Python-入门篇6/</id>
    <published>2019-12-15T09:14:52.000Z</published>
    <updated>2019-12-15T09:35:09.831Z</updated>
    
    <content type="html"><![CDATA[<p>这一部分是关于Python面向对象高级编程,有一部分不是很理解,有时间的话就补充一下内容.</p><a id="more"></a><h3 id="slots-的用法"><a href="#slots-的用法" class="headerlink" title="__slots__的用法"></a>__slots__的用法</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    __slots__ = (<span class="hljs-string">"name"</span>,<span class="hljs-string">"score"</span>,<span class="hljs-string">"age"</span>,<span class="hljs-string">"set_score"</span>) <span class="hljs-comment">#限制实例的属性,不允许随便动态绑定</span></span><br><span class="line">                                       <span class="hljs-comment">#仅对当前类有效,对子类不起作用</span></span><br><span class="line">                                       <span class="hljs-comment">#AttributeError: 'Student' object has no attribute 'zzz'</span></span><br><span class="line"><span class="hljs-comment">#绑定属性</span></span><br><span class="line">a = Student()</span><br><span class="line">a.name = <span class="hljs-string">"zlw"</span></span><br><span class="line">print(a.name)</span><br><span class="line"><span class="hljs-comment">#a.zzz = "zzz" 被限制了,无法绑定</span></span><br><span class="line"><span class="hljs-comment">#绑定方法</span></span><br><span class="line"><span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> MethodType</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_score</span><span class="hljs-params">(self,score)</span>:</span></span><br><span class="line">    self.score = score</span><br><span class="line">a.set_score = MethodType(set_score,a)</span><br><span class="line">a.set_score(<span class="hljs-number">100</span>)</span><br><span class="line">print(a.score)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># AttributeError: 'Student' object has no attribute 'set_score'</span></span><br><span class="line"><span class="hljs-comment">#b = Student()</span></span><br><span class="line"><span class="hljs-comment">#b.set_score(12)</span></span><br><span class="line"><span class="hljs-comment">#print(b.score)</span></span><br><span class="line"><span class="hljs-comment"># 直接改Class绑定方法</span></span><br><span class="line">Student.set_score = set_score</span><br><span class="line">b = Student()</span><br><span class="line">b.set_score(<span class="hljs-number">12</span>)</span><br><span class="line">print(b.score)</span><br></pre></td></tr></table></figure><h3 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#一般情况</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student1</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self._name</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_name</span><span class="hljs-params">(self,value)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isinstance(value,str):</span><br><span class="line">           <span class="hljs-keyword">raise</span>  ValueError(<span class="hljs-string">"name must be an String!"</span>)</span><br><span class="line">        self._name = value</span><br><span class="line"></span><br><span class="line">s1 = Student1();</span><br><span class="line">s1.set_name(<span class="hljs-string">"123"</span>)</span><br><span class="line">print(s1.get_name())</span><br></pre></td></tr></table></figure><p>上面的调用方法又略显复杂,没有直接用属性这么直接简单.<br>有没有既能检查参数,又可以用类似属性这样简单的方式来访问类的变量呢？</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#修改之后的</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student2</span><span class="hljs-params">()</span>:</span></span><br><span class="line"><span class="hljs-meta">    @property #把一个getter方法变成属性</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self._name</span><br><span class="line"><span class="hljs-meta">    @name.setter #@property本身又创建了另一个装饰器@name.setter,负责把一个setter方法变成属性赋值</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span><span class="hljs-params">(self,value)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isinstance(value,str):</span><br><span class="line">           <span class="hljs-keyword">raise</span>  ValueError(<span class="hljs-string">"name must be an String!"</span>)</span><br><span class="line">        self._name = value</span><br><span class="line"></span><br><span class="line">s2 = Student2()</span><br><span class="line">s2.name = <span class="hljs-string">"zlw"</span></span><br><span class="line">print(s2.name)</span><br></pre></td></tr></table></figure><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>比如,让Dog除了继承自Animal外,再同时继承Canid.这种设计通常称之为MixIn.<br>MixIn的目的就是给一个类增加多个功能,这样,在设计类的时候,我们优先考虑通过多重继承来组合多个MixIn的功能,而不是设计多层次的复杂的继承关系.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Animal</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"this is Animal"</span>)</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Canid</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Canid</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"this is Canid"</span>)</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Feline</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Feline</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"this is Feline"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span><span class="hljs-params">(Animal,Canid)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name)</span>:</span></span><br><span class="line">        self__name = name</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span>  <span class="hljs-comment">#print 输出显示</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"this is __str__ "</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span> <span class="hljs-comment">#交互式的时候直接输出 d 显示</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"this is __repr__"</span></span><br><span class="line"><span class="hljs-comment">#    __str__ == __repr__()</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#__str__()返回用户看到的字符串</span></span><br><span class="line"><span class="hljs-comment"># __repr__()返回程序开发者看到的字符串,也就是说,__repr__()是为调试服务的.</span></span><br><span class="line"></span><br><span class="line">d = Dog(<span class="hljs-string">"zlw"</span>)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><h3 id="iter-用法"><a href="#iter-用法" class="headerlink" title="__iter__用法"></a>__iter__用法</h3><p>如果一个类想被用于for … in循环,类似list或tuple那样,就必须实现一个__iter__()方法,该方法<font color="red">返回一个迭代对象</font>,然后,Python的for循环就会不断调用该迭代对象的__next__()方法拿到循环的下一个值,直到遇到StopIteration错误时退出循环.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fib</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.x1 ,self.x2 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__iter__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__next__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.x1 ,self.x2 = self.x2 ,self.x1+self.x2</span><br><span class="line">        <span class="hljs-keyword">if</span>(self.x1 &gt; <span class="hljs-number">3000</span>):</span><br><span class="line">            <span class="hljs-keyword">raise</span>  StopIteration(<span class="hljs-string">""</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> self.x1</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> Fib():</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><h4 id="getitem-省略需要的时候在看"><a href="#getitem-省略需要的时候在看" class="headerlink" title="__getitem__省略需要的时候在看"></a>__getitem__省略需要的时候在看</h4><h3 id="getattr-用法"><a href="#getattr-用法" class="headerlink" title="__getattr__用法"></a>__getattr__用法</h3><p>当调用不存在的属性时,比如score,Python解释器会试图调用__getattr__(self, ‘score’)来尝试获得属性,这样就避免了查找不到属性时报错</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student3</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span><span class="hljs-params">(self, attr)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> attr ==<span class="hljs-string">"score"</span>: <span class="hljs-comment">#要让class只响应特定的几个属性,我们就要按照约定,抛出AttributeError的错误</span></span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">100</span></span><br><span class="line">        <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">"!!!!"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span><span class="hljs-params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"this is call"</span>)</span><br><span class="line"></span><br><span class="line">s = Student3(<span class="hljs-string">"zlw"</span>);</span><br><span class="line">print(s.score)</span><br><span class="line"><span class="hljs-comment">#非常方便地调用API了</span></span><br></pre></td></tr></table></figure><h3 id="call-用法"><a href="#call-用法" class="headerlink" title="__call__用法"></a>__call__用法</h3><p>就可以直接对实例进行调用.<br>当我们调用实例方法时,我们用instance.method()来调用.<br>通过callable()函数,我们就可以判断一个对象是否是“可调用”对象.<br>print(s())<br>print(callable(s))</p><h3 id="使用枚举类"><a href="#使用枚举类" class="headerlink" title="使用枚举类"></a>使用枚举类</h3><p>from enum import Enum<br>Month = Enum(‘Month’, (‘Jan’, ‘Feb’, ‘Mar’, ‘Apr’, ‘May’, ‘Jun’, ‘Jul’, ‘Aug’, ‘Sep’, ‘Oct’, ‘Nov’, ‘Dec’))<br>省略,需要的时候在去复习</p><h3 id="type-函数"><a href="#type-函数" class="headerlink" title="type()函数"></a>type()函数</h3><p>可以查看一个类型或变量的类型,<br>Hello是一个class,它的类型就是type,而h是一个实例,它的类型就是class Hello.<br>class的定义是运行时动态创建的,而创建class的方法就是使用type()函数.<br>要创建一个class对象,type()函数依次传入3个参数：<br>1.class的名称；<br>2.继承的父类集合,注意Python支持多重继承,如果只有一个父类,别忘了tuple的单元素写法；<br>3.class的方法名称与函数绑定,这里我们把函数fn绑定到方法名hello上.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f1</span><span class="hljs-params">(self,name=<span class="hljs-string">"zlw"</span>)</span>:</span></span><br><span class="line">    print(<span class="hljs-string">"Hello %s"</span> %name)</span><br><span class="line">Hello = type(<span class="hljs-string">"Hello"</span>,(object,),dict(hello=f1))</span><br><span class="line">h = Hello()</span><br><span class="line">h.hello()</span><br><span class="line">print(type(Hello))</span><br><span class="line">print(type(h))</span><br></pre></td></tr></table></figure><h3 id="metaclass-元类-省略-有需要在补充"><a href="#metaclass-元类-省略-有需要在补充" class="headerlink" title="metaclass(元类)省略 有需要在补充"></a>metaclass(元类)省略 有需要在补充</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一部分是关于Python面向对象高级编程,有一部分不是很理解,有时间的话就补充一下内容.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-入门篇5</title>
    <link href="http://yoursite.com/2019/12/15/Python-%E5%85%A5%E9%97%A8%E7%AF%875/"/>
    <id>http://yoursite.com/2019/12/15/Python-入门篇5/</id>
    <published>2019-12-15T04:56:35.000Z</published>
    <updated>2019-12-15T09:17:46.775Z</updated>
    
    <content type="html"><![CDATA[<p>这部分主要是对于Python的面向对象编程的描述和一部分模块知识的梳理.</p><a id="more"></a><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><figure class="highlight python hljs"><figcaption><span>title:Hello.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#!/usr/bin/env python3   #可以让这个文件直接在Unix/Linux/Mac上运行</span></span><br><span class="line"><span class="hljs-comment">#-*- coding: utf-8 -*-   #表示该文件本身使用标准UTF-8编码</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"this is test"</span>           <span class="hljs-comment">#表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="hljs-string">"zlw"</span>       <span class="hljs-comment">#作者</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dog</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">private_1</span><span class="hljs-params">(name)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello, %s'</span> % name</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">private_2</span><span class="hljs-params">(name)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">'Hi, %s'</span> % name</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__test2</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"我是私有方法,只有本模块才调用"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test3</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"我是test3"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__test4</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"我是test4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#当该模块被直接执行时，条件成立，执行指定的入口模块代码，</span></span><br><span class="line"><span class="hljs-comment"># 否则什么也不做。就相当于手动给py模块指定一个main函数一样，</span></span><br><span class="line"><span class="hljs-comment"># 如果未指定直接运行py模块会从上到下依次执行。</span></span><br><span class="line"><span class="hljs-comment">#if __name__=='__main__':</span></span><br><span class="line"><span class="hljs-comment">#    test1()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是调用上面编写的模块:</p><figure class="highlight python hljs"><figcaption><span>title:test.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> Hello</span><br><span class="line">print(<span class="hljs-string">"我是模块B"</span>)</span><br><span class="line">Hello.dog.private_1(<span class="hljs-string">"zlw"</span>)</span><br><span class="line">Hello.dog.test3(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#__foo__: 定义的是特殊方法，一般是系统定义名字 ，类似 __init__() 之类的。</span></span><br><span class="line"><span class="hljs-comment">#_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *</span></span><br><span class="line"><span class="hljs-comment">#__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。</span></span><br><span class="line"><span class="hljs-comment">#foo:就是public方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>紧接着是(object)，表示该类是从哪个类继承下来的，如果没有合适的继承类，就使用object类，</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line">    <span class="hljs-comment">#创建实例的时候，就把name，score等属性绑上去</span></span><br><span class="line">    <span class="hljs-comment">#注意到__init__方法的第一个参数永远是self，表示创建的实例本身，因此，</span></span><br><span class="line">    <span class="hljs-comment"># 在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。</span></span><br><span class="line">    <span class="hljs-comment">#除此之外，类的方法和普通函数没有什么区别</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name,score)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printScore</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"name=%s,score=%s"</span> %(self.__name,self.__score))</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.__name</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_score</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.__score</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_name</span><span class="hljs-params">(self,name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_score</span><span class="hljs-params">(self,score)</span>:</span></span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Student(<span class="hljs-string">"zlw"</span>,<span class="hljs-number">100</span>)</span><br><span class="line"><span class="hljs-comment">#绑定属性</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="hljs-comment"># print(a.name,a.score)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#数据封装 这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</span></span><br><span class="line">a.printScore()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private）</span></span><br><span class="line">print(a.get_name(),a.get_score())</span><br><span class="line">a.set_name(<span class="hljs-string">"zlwzlwzlw"</span>)</span><br><span class="line">a.set_score(<span class="hljs-number">11111</span>)</span><br><span class="line">print(a.get_name(),a.get_score())</span><br><span class="line"><span class="hljs-comment">#在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的</span></span><br><span class="line"><span class="hljs-comment"># ，是特殊变量，特殊变量是可以直接访问的，</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#外部代码“成功”地设置了__name变量，但实际上这个__name变量和class内部的__name变量不是一个变量！</span></span><br><span class="line"><span class="hljs-comment"># 内部的__name变量已经被Python解释器自动改成了_Student__name，而外部代码给a新增了一个__name变量。</span></span><br><span class="line">a.__name = <span class="hljs-string">"zzzzz"</span></span><br><span class="line">print(a.__name)</span><br><span class="line">print(a.get_name())</span><br></pre></td></tr></table></figure><h4 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"This is Animal"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#子类的run()覆盖了父类的run()</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span><span class="hljs-params">(Animal)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span> <span class="hljs-comment">#</span></span><br><span class="line">        print(<span class="hljs-string">"This is Dog"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span><span class="hljs-params">(Animal)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"This is Cat"</span>)</span><br><span class="line"></span><br><span class="line">Dog().run()</span><br><span class="line">Cat().run()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#当我们定义一个class的时候，我们实际上就定义了一种数据类型。</span></span><br><span class="line"><span class="hljs-comment"># 我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样：</span></span><br><span class="line">a = list()</span><br><span class="line">b = Animal()</span><br><span class="line">c = Dog()</span><br><span class="line"></span><br><span class="line">print(isinstance(a,list),isinstance(b,Animal),isinstance(c,Dog))</span><br><span class="line"><span class="hljs-comment"># 因为Dog是是从Animal继承下来的, dog本是Animal的一种,但Animal不都是dog</span></span><br><span class="line">print(isinstance(c,Animal))</span><br><span class="line">a = Animal()</span><br><span class="line">print(isinstance(a,Dog))</span><br><span class="line"><span class="hljs-comment">#对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。</span></span><br><span class="line"><span class="hljs-comment">#对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了：</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Timer</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">()</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"stars!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</span></span><br><span class="line"><span class="hljs-comment">#Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个read()方法，返回其内容。但是，许多对象，只要有read()方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了read()方法的对象。</span></span><br></pre></td></tr></table></figure><p>判断对象类型<br>使用type()函数,判断一个对象是否是函数</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">print(type(<span class="hljs-number">123</span>))</span><br><span class="line">print(type(a))</span><br><span class="line">print(type(c))</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">"---------------"</span>)</span><br><span class="line"><span class="hljs-comment">#types模块中定义的常量,</span></span><br><span class="line"><span class="hljs-keyword">import</span> types</span><br><span class="line">print(type(a.run())==types.FunctionType)</span><br><span class="line">print(type(<span class="hljs-keyword">lambda</span> x,y:x * y)==types.LambdaType)</span><br><span class="line">print(type(x*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>))==types.GeneratorType)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#isinstance</span></span><br><span class="line">print(isinstance([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],(list,tuple)))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#dir() 获得一个对象的所有属性和方法,返回一个包含字符串的list</span></span><br><span class="line">lista = dir(c)</span><br><span class="line"><span class="hljs-comment">#for x in lista:</span></span><br><span class="line"><span class="hljs-comment">#    print(x)</span></span><br><span class="line"><span class="hljs-comment">#获得指定的属性 getattr() setattr() hasattr()</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Myobject</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.x = <span class="hljs-number">9</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">power</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">         <span class="hljs-keyword">return</span> self.x * self.x</span><br><span class="line"></span><br><span class="line">a1 = Myobject();</span><br><span class="line"><span class="hljs-comment"># self.__x 则访问不了</span></span><br><span class="line">print(getattr(a1,<span class="hljs-string">"x"</span>))</span><br><span class="line">print(setattr(a1,<span class="hljs-string">"zlw"</span>,<span class="hljs-string">"zlwzlw"</span>))</span><br><span class="line">print(hasattr(a1,<span class="hljs-string">"zlw"</span>))</span><br><span class="line">print(getattr(a1,<span class="hljs-string">"zlw"</span>))</span><br><span class="line">print(a1.x,a1.zlw)</span><br><span class="line"><span class="hljs-comment"># AttributeError: 'Myobject' object has no attribute 'y'</span></span><br><span class="line"><span class="hljs-comment"># print(getattr(a1,"y"))</span></span><br><span class="line">print(getattr(a1,<span class="hljs-string">"power"</span>)())</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student1</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    name = <span class="hljs-string">"zlwzlw"</span> <span class="hljs-comment">#可以直接在class中定义属性，这种属性是类属性，归Student1类所有</span></span><br><span class="line">                    <span class="hljs-comment">#这个属性虽然归类所有，但类的所有实例都可以访问到</span></span><br><span class="line"></span><br><span class="line">a = Student1();</span><br><span class="line">print(a.name)</span><br><span class="line">b = Student1();</span><br><span class="line">print(b.name)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分主要是对于Python的面向对象编程的描述和一部分模块知识的梳理.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-入门篇4</title>
    <link href="http://yoursite.com/2019/12/14/Python-%E5%85%A5%E9%97%A8%E7%AF%874/"/>
    <id>http://yoursite.com/2019/12/14/Python-入门篇4/</id>
    <published>2019-12-14T09:00:53.000Z</published>
    <updated>2019-12-14T12:16:07.207Z</updated>
    
    <content type="html"><![CDATA[<p>这部分是关于函数式编程,<b>函数式编程关心数据的映射,命令式编程关心解决问题的步骤</b></p><a id="more"></a><p>函数本身也可以赋值给变量,即：变量可以指向函数。函数名其实就是指向函数的变量！<br>既然变量可以指向函数,函数的参数能接收变量,那么一个函数就可以接收另一个函数作为参数,这种函数就称之为高阶函数。函数式编程就是指这种高度抽象的编程范式。</p><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>map()函数接收两个参数,一个是函数,一个是Iterable,<br>map将传入的函数依次作用到序列的每个元素,并把结果作为新的Iterator返回。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> x * x</span><br><span class="line">zzz = map(f,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>])</span><br><span class="line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> zzz:</span><br><span class="line">    print(x)</span><br><span class="line">z= list(map(str,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]))</span><br><span class="line">print(z)</span><br></pre></td></tr></table></figure><h3 id="reduce-跟java8中的reduce相似"><a href="#reduce-跟java8中的reduce相似" class="headerlink" title="reduce (跟java8中的reduce相似)"></a>reduce (跟java8中的reduce相似)</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f1</span><span class="hljs-params">(x,x1)</span>:</span> <span class="hljs-comment">#第一个参数是之前累积的数(初始值是第一个元素),第二个是下一个跟数</span></span><br><span class="line">    <span class="hljs-keyword">return</span> x * <span class="hljs-number">10</span> + x1</span><br><span class="line">zlw = reduce(f1,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]) <span class="hljs-comment"># f1这个函数必须接收两个参数,也可以用lambda表达式来</span></span><br><span class="line">print(zlw)</span><br><span class="line">print(reduce(<span class="hljs-keyword">lambda</span> x1 ,x2: x1 *<span class="hljs-number">100</span> +x2,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]))</span><br></pre></td></tr></table></figure><h3 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h3><p>用于过滤序列.跟java8 stream 很相似filter()函数返回的是一个Iterator,<br>也就是一个惰性序列,所以要强迫filter()完成计算结果,需要用list()函数获得所有结果并返回list。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(list(filter(<span class="hljs-keyword">lambda</span> n: n%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>,list(range(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>)))))</span><br></pre></td></tr></table></figure><h3 id="sorted-排序函数"><a href="#sorted-排序函数" class="headerlink" title="sorted()排序函数"></a>sorted()排序函数</h3><p>key函数返回的结果进行排序<br>sorted(迭代对象,key函数,reverse=True反向排序)</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(sorted([<span class="hljs-number">1</span>,<span class="hljs-number">65</span>,<span class="hljs-number">23</span>,<span class="hljs-number">91</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">48</span>,<span class="hljs-number">-99</span>]))</span><br><span class="line">print(sorted([<span class="hljs-number">1</span>,<span class="hljs-number">65</span>,<span class="hljs-number">23</span>,<span class="hljs-number">91</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">48</span>,<span class="hljs-number">-99</span>],key=abs))</span><br><span class="line">print(sorted([<span class="hljs-string">"Zlw"</span>,<span class="hljs-string">"restore"</span>,<span class="hljs-string">"Reputation"</span>,<span class="hljs-string">"abc"</span>],key=str.lower))</span><br><span class="line">print(sorted([<span class="hljs-number">1</span>,<span class="hljs-number">65</span>,<span class="hljs-number">23</span>,<span class="hljs-number">91</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">48</span>,<span class="hljs-number">-99</span>],key=abs,reverse=<span class="hljs-literal">True</span>))</span><br><span class="line">L = [(<span class="hljs-string">'Bob'</span>, <span class="hljs-number">75</span>), (<span class="hljs-string">'Adam'</span>, <span class="hljs-number">92</span>), (<span class="hljs-string">'Bart'</span>, <span class="hljs-number">66</span>), (<span class="hljs-string">'Lisa'</span>, <span class="hljs-number">88</span>)]</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">t1</span><span class="hljs-params">(L)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> L[<span class="hljs-number">1</span>];</span><br><span class="line">print(sorted(L,key=t1,reverse=<span class="hljs-literal">True</span>))</span><br></pre></td></tr></table></figure><h3 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum</span><span class="hljs-params">(*args)</span>:</span></span><br><span class="line">    ax = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> args:</span><br><span class="line">        ax = ax + x</span><br><span class="line">    <span class="hljs-keyword">return</span> ax</span><br><span class="line">print(sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>))</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lazy</span><span class="hljs-params">(*args)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span>:</span></span><br><span class="line">        ax = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> args:</span><br><span class="line">            ax = ax + x</span><br><span class="line">        <span class="hljs-keyword">return</span> ax</span><br><span class="line">    <span class="hljs-keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">print(lazy(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>)())</span><br></pre></td></tr></table></figure><p>我们在函数lazy_sum中又定义了函数sum,并且,内部函数sum可以引用外部函数lazy_sum的参数和局部变量,<br>当lazy_sum返回函数sum时,相关参数和变量都保存在返回的函数中,这种称为“闭包（Closure）”的程序.<br>【注】返回的函数并没有立刻执行,而是直到调用了f()才执行</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a><font color="red">闭包</font></h4><p>闭包：如果在一个内部函数里对外部函数（不是在全局作用域）的变量进行引用,内部函数就被认为是闭包。</p><h4 id="闭包产生条件"><a href="#闭包产生条件" class="headerlink" title="闭包产生条件"></a>闭包产生条件</h4><p>1.必须包含一个嵌套函数<br>2.嵌套函数必须引用封闭函数中定义的值（自由变量）<br>3.封闭函数必须返回嵌套函数</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>):</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span><span class="hljs-params">()</span>:</span></span><br><span class="line">            <span class="hljs-keyword">return</span> x * x</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="hljs-keyword">return</span> fs</span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line">print(f1())</span><br><span class="line">print(f2())</span><br><span class="line">print(f3())</span><br><span class="line"><span class="hljs-comment">#返回函数不要引用任何循环变量,或者后续会发生变化的变量。</span></span><br><span class="line"><span class="hljs-comment">#因为调用count()方法for循环了三次1-&gt;2-&gt;3,i的值为三,但内嵌的函数并没执行.</span></span><br><span class="line"><span class="hljs-comment">#等到3个函数都返回时,它们所引用的变量i已经变成了3,因此最终结果为9。</span></span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>关键字lambda表示匿名函数,冒号前面的x表示函数参数。不用写return,返回值就是该表达式的结果。</p><h3 id="装饰器-python装饰器（fuctional-decorators）"><a href="#装饰器-python装饰器（fuctional-decorators）" class="headerlink" title="装饰器 python装饰器（fuctional decorators）"></a>装饰器 python装饰器（fuctional decorators）</h3><p>就是用于拓展原来函数功能的一种函数,目的是在不改变原函数名(或类名)的情况下给函数增加新的功能。<br>在函数调用前后自动打印日志,但又不希望修改f()函数的定义<br>这种在代码运行期间动态增加功能的方式,称之为“装饰器”（Decorator）</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">log</span><span class="hljs-params">(f1)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span><span class="hljs-params">(a)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"call %s()"</span> % f1.__name__)</span><br><span class="line">        <span class="hljs-keyword">return</span> f1(a)</span><br><span class="line">    <span class="hljs-keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@log</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f1</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">print(f1(<span class="hljs-number">10</span>),f1.__name__)</span><br><span class="line"><span class="hljs-comment">#1.带有固定参数的装饰器</span></span><br><span class="line"><span class="hljs-comment">#def wrapper(a):</span></span><br><span class="line"><span class="hljs-comment">#2.无固定参数的装饰器</span></span><br><span class="line"><span class="hljs-comment">#def wrapper(*args, **kwargs):</span></span><br><span class="line"><span class="hljs-comment">#3.使用多个装饰器,装饰一个函数（套娃）</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#import functools</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">log2</span><span class="hljs-params">(zlw1)</span>:</span></span><br><span class="line"><span class="hljs-comment">#    @functools.wraps(zlw1)</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span><span class="hljs-params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="hljs-string">"call %s() "</span> % zlw1.__name__)</span><br><span class="line">        <span class="hljs-keyword">return</span> zlw1(*args, **kwargs)</span><br><span class="line">    <span class="hljs-keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logzlw</span><span class="hljs-params">(text)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">log3</span><span class="hljs-params">(zlw1)</span>:</span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span><span class="hljs-params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="hljs-string">"x是百位,y是十位,z是个位 %s"</span> %text)</span><br><span class="line">            <span class="hljs-keyword">return</span> zlw1(*args, **kwargs)</span><br><span class="line">        <span class="hljs-keyword">return</span> wrapper</span><br><span class="line">    <span class="hljs-keyword">return</span> log3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@log2</span></span><br><span class="line"><span class="hljs-meta">@logzlw("zlwzlwzlw")</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">zlw1</span><span class="hljs-params">(x,y,z)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> x * <span class="hljs-number">100</span> + y * <span class="hljs-number">10</span> + z</span><br><span class="line"><span class="hljs-comment"># log2(log3(zlw(9,8,7)))</span></span><br><span class="line">print(zlw1(<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>),zlw1.__name__)</span><br><span class="line"><span class="hljs-comment">#由于log()是一个decorator,返回一个函数,所以,原来的now()函数仍然存在</span></span><br><span class="line"><span class="hljs-comment">#只是现在同名的now变量指向了新的函数,于是调用now()将执行新函数,即在log()函数中返回的wrapper()函数。</span></span><br></pre></td></tr></table></figure><h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><p>import functools<br>int8 = functools.partial(int,base=8) #八进制转10<br>print(int8(“123124”))<br>int2 = functools.partial(int,base=2)#二进制转10<br>print(int2(“111111111111111”))</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分是关于函数式编程,&lt;b&gt;函数式编程关心数据的映射,命令式编程关心解决问题的步骤&lt;/b&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-入门篇3</title>
    <link href="http://yoursite.com/2019/12/13/Python-%E5%85%A5%E9%97%A8%E7%AF%873/"/>
    <id>http://yoursite.com/2019/12/13/Python-入门篇3/</id>
    <published>2019-12-13T09:47:36.000Z</published>
    <updated>2019-12-14T08:59:54.368Z</updated>
    
    <content type="html"><![CDATA[<p>这部分是关于Python的高级特性</p><a id="more"></a><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>就是取list跟tuple,如刀切一般,取出部分元素<br>L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3,那么它同样支持倒数切片</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="hljs-string">"ZLW1"</span>,<span class="hljs-string">"ZLW2"</span>,<span class="hljs-string">"ZLW3"</span>,<span class="hljs-string">"ZLW4"</span>,<span class="hljs-string">"ZLW5"</span>,<span class="hljs-string">"ZLW6"</span>]</span><br><span class="line">print(L[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])</span><br><span class="line">print(L[<span class="hljs-number">-1</span>:])</span><br><span class="line">print(L[<span class="hljs-number">-3</span>:<span class="hljs-number">-1</span>])</span><br><span class="line"><span class="hljs-comment">#前二 跟后二</span></span><br><span class="line">print(L[:<span class="hljs-number">2</span>])</span><br><span class="line">print(L[<span class="hljs-number">-2</span>:])</span><br><span class="line"><span class="hljs-comment">#前面5,每隔2个取一个</span></span><br><span class="line">print(L[:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])</span><br><span class="line"><span class="hljs-comment">#所有数，每5个取一个</span></span><br><span class="line">print(L[::<span class="hljs-number">2</span>])</span><br><span class="line"><span class="hljs-comment">#甚至什么都不写，只写[:]就可以原样复制一个list：</span></span><br><span class="line"><span class="hljs-comment">#tuple</span></span><br><span class="line">T = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>)</span><br><span class="line">print(T[::<span class="hljs-number">2</span>])</span><br><span class="line"><span class="hljs-comment">#String也可以切片</span></span><br><span class="line">print(<span class="hljs-string">"abcdefghijklmn"</span>[:<span class="hljs-number">10</span>])</span><br><span class="line">print(<span class="hljs-string">"abcdefghijklmn"</span>[<span class="hljs-number">-10</span>:])</span><br><span class="line">print(<span class="hljs-string">"abcdefghijklmn"</span>[::<span class="hljs-number">2</span>])</span><br></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="hljs-string">"a"</span>:<span class="hljs-number">123</span>,<span class="hljs-string">"b"</span>:<span class="hljs-number">345</span>,<span class="hljs-string">"c"</span>:<span class="hljs-number">678</span>&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> k,values <span class="hljs-keyword">in</span> d.items(): <span class="hljs-comment"># d.values()  d.items()</span></span><br><span class="line">    print(k,values)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#使用for循环时,只要作用于一个可迭代对象,for循环就可以正常运行.</span></span><br><span class="line"><span class="hljs-comment">#collections模块的Iterable类型判断 还可以判断其他类型 isinstance(x, str)</span></span><br><span class="line"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterable <span class="hljs-comment">#加.abc</span></span><br><span class="line">print(isinstance(<span class="hljs-string">"ABCDEF"</span>,Iterable))</span><br><span class="line">print(isinstance([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">34</span>],Iterable))</span><br><span class="line">print(isinstance(<span class="hljs-number">1234</span>,Iterable))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#Python内置的enumerate函数可以把一个list变成索引-元素对,跟java一样可以用下标访问</span></span><br><span class="line">L = [<span class="hljs-string">"A"</span>,<span class="hljs-string">"B"</span>,<span class="hljs-string">"C"</span>,<span class="hljs-string">"D"</span>]</span><br><span class="line"><span class="hljs-keyword">for</span> x,values <span class="hljs-keyword">in</span> enumerate(L):</span><br><span class="line">    print(x,values)</span><br></pre></td></tr></table></figure><h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">print(list(range(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>)))</span><br><span class="line">L = []</span><br><span class="line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>):</span><br><span class="line">    L.append(x * x)</span><br><span class="line">print(L)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来，</span></span><br><span class="line"><span class="hljs-comment"># 十分有用,for循环后面还可以加上if判断,还可以使用两层循环</span></span><br><span class="line">list = [x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>) <span class="hljs-keyword">if</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>]</span><br><span class="line">print(list)</span><br><span class="line">i = <span class="hljs-number">0</span></span><br><span class="line">print([A + B <span class="hljs-keyword">for</span> A <span class="hljs-keyword">in</span> <span class="hljs-string">"ABCDE"</span> <span class="hljs-keyword">for</span> B <span class="hljs-keyword">in</span> <span class="hljs-string">"FGHIJ"</span>])</span><br><span class="line"></span><br><span class="line">L = [<span class="hljs-string">"HOLLE"</span>,<span class="hljs-string">"WORD"</span>,<span class="hljs-string">"PYTHON"</span>]</span><br><span class="line">print([x.lower() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> L])</span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？<br>这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。<br>只要把一个列表生成式的[]改成()，就创建了一个generator：<br>generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">g = (x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>))</span><br><span class="line">print(next(g),next(g),next(g),next(g),next(g)) <span class="hljs-comment">#太麻烦了,用for</span></span><br><span class="line"><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> g:  <span class="hljs-comment">#之前</span></span><br><span class="line">    print(n)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#斐波拉契数列</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span><span class="hljs-params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">while</span> n &lt; max:</span><br><span class="line">        print(b)</span><br><span class="line">        a, b = b, a+b <span class="hljs-comment">#相当于把这两个数组装了成一个tuple t = (b, a + b) # a = t[0] b =t[1]</span></span><br><span class="line">        n += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"done"</span></span><br><span class="line">fib(<span class="hljs-number">20</span>)</span><br><span class="line"><span class="hljs-comment">#可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。</span></span><br><span class="line"><span class="hljs-comment">#只需要把print(b)改为yield b,如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib1</span><span class="hljs-params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="hljs-keyword">yield</span> b</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        n += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"done"</span></span><br><span class="line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fib1(<span class="hljs-number">10</span>):</span><br><span class="line">    print(x)</span><br><span class="line"><span class="hljs-comment">#generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。</span></span><br><span class="line"><span class="hljs-comment"># 而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</span></span><br><span class="line"><span class="hljs-comment">#在执行过程中，遇到yield就中断，下次又继续执行。</span></span><br><span class="line"><span class="hljs-comment">#发现拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value</span></span><br><span class="line">print(<span class="hljs-string">"----------------"</span>)</span><br><span class="line">g = fib1(<span class="hljs-number">10</span>)</span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><br><span class="line">    <span class="hljs-keyword">try</span>:</span><br><span class="line">        print(next(g))</span><br><span class="line">    <span class="hljs-keyword">except</span> StopIteration <span class="hljs-keyword">as</span> e:</span><br><span class="line">        print(<span class="hljs-string">"StopIteration!!"</span>,e.value)</span><br><span class="line">        <span class="hljs-keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>可以直接作用于for循环的对象统称为可迭代对象：Iterable。（String,list,tuple,dict,set）,Iterable变成Iterator可以使用iter()函数：<br>可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。<br>可以使用isinstance()判断一个对象是否是Iterator对象：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(isinstance((x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>)),Iterable))</span><br><span class="line">print(isinstance(<span class="hljs-number">123</span>,Iterable))</span><br><span class="line"></span><br><span class="line">L = iter([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])</span><br><span class="line">print(next(L))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#S = [1,2,3,4,5]</span></span><br><span class="line"><span class="hljs-comment">#print(next(S))</span></span><br><span class="line"><span class="hljs-comment">#这样会报错 TypeError: 'list' object is not an iterator 不是迭代器对象</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#Iterator甚至可以表示一个无限大的数据流,同样也是堕性的</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分是关于Python的高级特性&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
</feed>
